/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as h from "react";
import i from "prop-types";
import { PagerNumericButtons as ae } from "./PagerNumericButtons.mjs";
import { PagerInput as ie } from "./PagerInput.mjs";
import { PagerPageSizes as re } from "./PagerPageSizes.mjs";
import { Button as oe } from "@progress/kendo-react-buttons";
import { pagerFirstPage as y, messages as l, pagerPreviousPage as b, pagerNextPage as S, pagerLastPage as k, pagerInfo as K, pagerAriaKeyshortcuts as E, pagerPage as z, pagerOf as w, pagerTotalPages as C } from "../messages/index.mjs";
import { provideLocalizationService as ne, provideIntlService as ge, registerForIntl as le, registerForLocalization as he } from "@progress/kendo-react-intl";
import { Keys as n, focusFirstFocusableChild as pe, enableNavigatableContainer as ue, disableNavigatableContainer as ce, keepFocusInContainer as me, TABBABLE_ELEMENTS as fe, validatePackage as de, classNames as q, kendoThemeMaps as Pe } from "@progress/kendo-react-common";
import { caretAltToRightIcon as V, caretAltToLeftIcon as U, caretAltRightIcon as j, caretAltLeftIcon as G } from "@progress/kendo-svg-icons";
import { packageMetadata as Me } from "../package-metadata.mjs";
const H = 600, ve = 768, P = class P extends h.Component {
  constructor(p) {
    super(p), this._element = null, this.onPageChange = (t, e) => {
      const a = {
        target: this,
        syntheticEvent: e.syntheticEvent,
        nativeEvent: e.nativeEvent,
        targetEvent: e,
        ...t
      };
      this.props.onPageChange && this.props.onPageChange.call(void 0, a);
    }, this.changePage = (t, e) => {
      this.props.onPageChange && t > 0 && t <= this.totalPages && this.props.onPageChange({
        target: this,
        skip: (t - 1) * this.props.take,
        take: this.props.take,
        syntheticEvent: e,
        nativeEvent: e.nativeEvent,
        targetEvent: e
      });
    }, this.onWindowResize = () => {
      const t = this.element;
      if (!t || !this.props.responsive)
        return;
      const e = t.offsetWidth;
      e < H ? this.setState({ showPagerSizes: !1 }) : e >= H && e < ve ? this.setState({ showPagerInfo: !1, showPagerSizes: !0 }) : this.setState({ showPagerInfo: !0, showPagerSizes: !0 });
    }, this.onKeyDown = (t) => {
      const e = this.element, a = t.keyCode;
      !e || !this.props.navigatable || ((a === n.home || t.metaKey && a === n.left) && this.changePage(1, t), (a === n.end || t.metaKey && a === n.right) && this.changePage(this.totalPages, t), document.activeElement === e ? (a === n.enter && (pe(e), ue(e)), (a === n.left || a === n.up) && this.changePage(this.currentPage - 1, t), (a === n.right || a === n.down) && this.changePage(this.currentPage + 1, t)) : (a === n.esc && (e.focus(), ce(e)), me(t, e, fe)));
    }, de(Me), this.state = { showPagerSizes: !0, showPagerInfo: !0, innerNavigateActive: !1 };
  }
  get isRtl() {
    return this.props.dir === "rtl";
  }
  get currentPage() {
    return Math.floor(this.props.skip / this.props.take) + 1;
  }
  /**
   * Returns the HTML element of the Pager component.
   */
  get element() {
    return this._element;
  }
  /**
   * @hidden
   */
  componentDidMount() {
    window.addEventListener("resize", this.onWindowResize), this.onWindowResize();
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    window.removeEventListener("resize", this.onWindowResize);
  }
  /**
   * @hidden
   */
  render() {
    const { showPagerSizes: p, showPagerInfo: t } = this.state, {
      skip: e,
      take: a,
      total: u,
      pageSizes: c,
      size: g,
      responsive: M,
      messagesMap: s,
      dir: J,
      style: Q,
      pageSizeValue: X,
      previousNext: Y,
      className: Z,
      navigatable: m
    } = this.props, o = ne(this), v = ge(this), r = this.currentPage, ee = this.props.type === "numeric" ? /* @__PURE__ */ h.createElement(
      ae,
      {
        type: M && !p ? "dropdown" : "numbers",
        buttonCount: this.props.buttonCount || 0,
        totalPages: this.totalPages,
        currentPage: this.currentPage,
        pageChange: this.changePage,
        messagesMap: this.props.messagesMap,
        size: g,
        navigatable: m
      }
    ) : /* @__PURE__ */ h.createElement(
      ie,
      {
        buttonCount: this.props.buttonCount || 0,
        totalPages: this.totalPages,
        currentPage: r,
        pageChange: this.changePage,
        messagesMap: s,
        size: g,
        navigatable: m
      }
    ), R = s ? s(y) : { messageKey: y, defaultMessage: l[y] }, L = s ? s(b) : { messageKey: b, defaultMessage: l[b] }, I = s ? s(S) : { messageKey: S, defaultMessage: l[S] }, N = s ? s(k) : { messageKey: k, defaultMessage: l[k] }, A = s ? s(K) : { messageKey: K, defaultMessage: l[K] }, B = s ? s(E) : { messageKey: E, defaultMessage: l[E] }, T = s ? s(z) : { messageKey: z, defaultMessage: l[z] }, x = s ? s(w) : { messageKey: w, defaultMessage: l[w] }, f = s ? s(C) : { messageKey: C, defaultMessage: l[C] }, te = `${o.toLanguageString(
      T.messageKey,
      T.defaultMessage
    )} ${v.format(
      o.toLanguageString(
        f.messageKey,
        f.defaultMessage
      ),
      [r]
    )} ${o.toLanguageString(
      x.messageKey,
      x.defaultMessage
    )} ${v.format(
      o.toLanguageString(
        f.messageKey,
        f.defaultMessage
      ),
      [this.totalPages]
    )}`;
    let O, D, F, W;
    Y && (O = this.renderButton(
      1,
      "k-pager-nav k-pager-first" + (r === 1 ? " k-disabled" : ""),
      o.toLanguageString(R.messageKey, R.defaultMessage),
      this.isRtl ? "caret-alt-to-right" : "caret-alt-to-left",
      this.isRtl ? V : U,
      r === 1 ? !0 : void 0
    ), D = this.renderButton(
      r - 1,
      "k-pager-nav" + (r === 1 ? " k-disabled" : ""),
      o.toLanguageString(L.messageKey, L.defaultMessage),
      this.isRtl ? "caret-alt-right" : "caret-alt-left",
      this.isRtl ? j : G,
      r === 1 ? !0 : void 0
    ), F = this.renderButton(
      r + 1,
      "k-pager-nav" + (r >= this.totalPages ? " k-disabled" : ""),
      o.toLanguageString(I.messageKey, I.defaultMessage),
      this.isRtl ? "caret-alt-left" : "caret-alt-right",
      this.isRtl ? G : j,
      r >= this.totalPages ? !0 : void 0
    ), W = this.renderButton(
      this.totalPages,
      "k-pager-nav k-pager-last" + (r >= this.totalPages ? " k-disabled" : ""),
      o.toLanguageString(N.messageKey, N.defaultMessage),
      this.isRtl ? "caret-alt-to-left" : "caret-alt-to-right",
      this.isRtl ? U : V,
      r >= this.totalPages ? !0 : void 0
    ));
    const _ = c && /* @__PURE__ */ h.createElement(
      re,
      {
        pageChange: this.onPageChange,
        pageSize: a,
        pageSizes: c,
        value: X,
        messagesMap: s,
        size: g,
        navigatable: m
      }
    ), $ = this.props.info && /* @__PURE__ */ h.createElement("span", { className: "k-pager-info" }, v.format(o.toLanguageString(A.messageKey, A.defaultMessage), [
      Math.min(e + 1, u),
      Math.min(e + a, u),
      u
    ]));
    return /* @__PURE__ */ h.createElement(
      "div",
      {
        className: q(
          "k-pager",
          {
            [`k-pager-${Pe.sizeMap[g] || g}`]: g
          },
          Z
        ),
        style: Q,
        role: "application",
        "aria-roledescription": "pager",
        dir: J,
        "aria-keyshortcuts": o.toLanguageString(B.messageKey, B.defaultMessage),
        "aria-label": te,
        ref: (se) => this._element = se,
        tabIndex: m ? 0 : void 0,
        onKeyDown: this.onKeyDown
      },
      /* @__PURE__ */ h.createElement("div", { className: q("k-pager-numbers-wrap") }, O, D, ee, F, W),
      M ? p && _ : _,
      M ? t && $ : $
    );
  }
  renderButton(p, t, e, a, u, c) {
    return /* @__PURE__ */ h.createElement(
      oe,
      {
        fillMode: "flat",
        themeColor: "base",
        size: this.props.size,
        rounded: null,
        className: t,
        icon: a,
        svgIcon: u,
        title: e,
        role: "button",
        "aria-disabled": c,
        tabIndex: this.props.navigatable ? -1 : void 0,
        onClick: (g) => {
          g.preventDefault(), this.changePage(p, g);
        }
      }
    );
  }
  get totalPages() {
    return Math.ceil((this.props.total || 0) / this.props.take);
  }
};
P.propTypes = {
  className: i.string,
  style: i.object,
  total: i.number.isRequired,
  skip: i.number.isRequired,
  take: i.number.isRequired,
  buttonCount: i.number,
  info: i.bool,
  type: i.oneOf(["numeric", "input"]),
  pageSizes: i.arrayOf(i.oneOfType([
    i.string,
    i.number
  ])),
  previousNext: i.bool,
  onPageChange: i.func,
  messagesMap: i.func,
  size: i.oneOf([null, "small", "medium", "large"]),
  dir: i.string
}, P.defaultProps = {
  buttonCount: 10,
  info: !0,
  type: "numeric",
  size: "medium"
};
let d = P;
le(d);
he(d);
export {
  d as Pager
};
