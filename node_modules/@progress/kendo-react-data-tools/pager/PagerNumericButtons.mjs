/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as n from "react";
import { classNames as f, kendoThemeMaps as E } from "@progress/kendo-react-common";
import { Button as M } from "@progress/kendo-react-buttons";
import { pagerMobileSelect as i, messages as l, pagerPage as p, pagerMoreButtonLabel as g } from "../messages/index.mjs";
import { provideLocalizationService as z } from "@progress/kendo-react-intl";
const v = "...";
class I extends n.Component {
  constructor() {
    super(...arguments), this.handlePageChange = (e, s) => {
      e.preventDefault(), this.props.pageChange(s, e);
    }, this.handleSelectPageChange = (e) => {
      e.preventDefault(), this.props.pageChange(e.target.value, e);
    };
  }
  render() {
    const e = z(this), { messagesMap: s, size: a, totalPages: d, currentPage: r, type: u, navigatable: C } = this.props, c = s ? s(i) : { messageKey: i, defaultMessage: l[i] }, m = s ? s(p) : { messageKey: p, defaultMessage: l[p] }, h = s ? s(g) : { messageKey: g, defaultMessage: l[g] }, b = e.toLanguageString(h.messageKey, h.defaultMessage), y = this.start > 1 && this.renderDots(this.start - 1, b), k = this.end < d && this.renderDots(this.end + 1, b), D = this.start > 1 && this.renderOptionDots(this.start - 1), P = this.end < d && this.renderOptionDots(this.end + 1), o = [];
    for (let t = this.start; t <= this.end; t++)
      o.push(t);
    const S = o.map((t) => /* @__PURE__ */ n.createElement(
      M,
      {
        className: f({ "k-selected": r === t }),
        key: t,
        fillMode: "flat",
        themeColor: "primary",
        size: a,
        rounded: null,
        role: "button",
        "aria-label": e.toLanguageString(m.messageKey, m.defaultMessage) + " " + t,
        "aria-current": r === t ? !0 : void 0,
        onClick: (x) => this.handlePageChange(x, t),
        tabIndex: C ? -1 : void 0
      },
      t
    )), L = o.map((t) => /* @__PURE__ */ n.createElement("option", { key: t }, t));
    return /* @__PURE__ */ n.createElement(n.Fragment, null, /* @__PURE__ */ n.createElement(
      "select",
      {
        style: { width: "5em", margin: "0px 1em", display: u === "dropdown" ? "inline-flex" : "none" },
        className: f(
          "k-picker k-dropdown-list k-dropdown k-rounded-md",
          {
            [`k-picker-${E.sizeMap[a] || a}`]: a
          }
        ),
        "aria-label": e.toLanguageString(c.messageKey, c.defaultMessage),
        value: r,
        onChange: (t) => this.handleSelectPageChange(t)
      },
      D,
      L,
      P
    ), /* @__PURE__ */ n.createElement(
      "div",
      {
        className: "k-pager-numbers",
        style: { display: u === "numbers" ? "" : "none" }
      },
      y,
      S,
      k
    ));
  }
  get end() {
    return Math.min(this.start + this.props.buttonCount - 1, this.props.totalPages);
  }
  get start() {
    const e = this.props.currentPage, s = this.props.buttonCount;
    if (e > s) {
      const a = e % s;
      return a === 0 ? e - s + 1 : e - a + 1;
    }
    return 1;
  }
  renderDots(e, s) {
    return /* @__PURE__ */ n.createElement(
      M,
      {
        fillMode: "flat",
        themeColor: "primary",
        size: this.props.size,
        rounded: null,
        role: "button",
        "aria-label": s,
        onClick: (a) => this.handlePageChange(a, e),
        tabIndex: this.props.navigatable ? -1 : void 0
      },
      v
    );
  }
  renderOptionDots(e) {
    return /* @__PURE__ */ n.createElement("option", { value: e }, v);
  }
}
export {
  I as PagerNumericButtons
};
