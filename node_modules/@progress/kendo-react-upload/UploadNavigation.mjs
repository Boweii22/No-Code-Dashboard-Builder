/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as m from "react";
import { Keys as n, getActiveElement as I, canUseDOM as f } from "@progress/kendo-react-common";
import { UploadUI as x } from "./UploadUI.mjs";
const h = -2, s = -1;
class C extends m.Component {
  constructor(a) {
    super(a), this._uploadUI = null, this.focus = () => {
      this._uploadUI && this._uploadUI.focus();
    }, this.onKeyDown = (o, r) => {
      const e = this.navIndex, d = Object.keys(this.props.groupedFiles), l = d.length - 1, p = this.props.autoUpload || d.length === 0 ? l : l + 1, c = l + 1, v = c + 1, i = e === h ? s : e;
      let t = e;
      switch (o.keyCode) {
        case n.up:
          e > -1 && (t = i - 1);
          break;
        case n.down:
          e < p && (t = i + 1);
          break;
        case n.left:
          r ? e === c && (t = i + 1) : e === v && (t = i - 1);
          break;
        case n.right:
          r ? e === v && (t = i - 1) : e === c && (t = i + 1);
          break;
        case n.enter:
          if (e === s || e === h) {
            const u = I(document);
            this.actionElement && f && (u == null ? void 0 : u.className.indexOf("k-upload-button")) === -1 && this.actionElement.click();
          }
          e >= 0 && e <= l && this.onRetry(d[e]);
          break;
        case n.space:
          (e === s || e === h) && this.actionElement && this.actionElement.click(), o.preventDefault();
          break;
        case n.tab:
          t = h;
          break;
        case n.delete:
          e >= 0 && e <= l && (t = i - 1, this.onRemove(d[e]));
          break;
        case n.esc:
          e >= 0 && e <= l && (t = i - 1, this.onCancel(d[e]));
          break;
      }
      this.navIndex = t;
    }, this.onCancel = (o) => {
      this.props.onCancel && this.props.onCancel.call(void 0, o);
    }, this.onClear = () => {
      this.navIndex = s, this.props.onClear && this.props.onClear.call(void 0);
    }, this.onUpload = () => {
      this.navIndex = s, this.props.onUpload && this.props.onUpload.call(void 0);
    }, this.onRetry = (o) => {
      this.props.onRetry && this.props.onRetry.call(void 0, o);
    }, this.onRemove = (o) => {
      this.navIndex = this.navIndex > s ? this.navIndex - 1 : s, this.props.onRemove && this.props.onRemove.call(void 0, o);
    }, this.onAdd = (o) => {
      this.navIndex = s, this.props.onAdd && this.props.onAdd.call(void 0, o);
    }, this.onClick = (o) => {
      this.navIndex = o;
    }, this.onFocus = () => {
      this._blurTimeout && (clearTimeout(this._blurTimeout), this._blurTimeout = void 0);
    }, this.onBlurTimeout = () => {
      this.navIndex = h, this._blurTimeout = void 0;
    }, this.onBlur = () => {
      clearTimeout(this._blurTimeout), this._blurTimeout = window.setTimeout(this.onBlurTimeout);
    }, this._navIndex = h;
  }
  get navIndex() {
    return this._navIndex;
  }
  set navIndex(a) {
    const o = this.navIndex;
    this._navIndex = a, a !== o && this.forceUpdate();
  }
  get actionElement() {
    if (this._uploadUI)
      return this._uploadUI.actionElement;
  }
  componentDidUpdate(a) {
    const o = Object.keys(a.groupedFiles).length, r = Object.keys(this.props.groupedFiles).length;
    o > r && this.navIndex > s && (this.navIndex = this.navIndex - (o - r));
  }
  render() {
    const { onClear: a, onRemove: o, onRetry: r, onCancel: e, onUpload: d, onAdd: l, ...p } = this.props;
    return /* @__PURE__ */ m.createElement(
      x,
      {
        ref: (c) => this._uploadUI = c,
        className: this.props.className,
        onKeyDown: this.onKeyDown,
        navigationIndex: this.navIndex,
        notFocusedIndex: h,
        onAdd: this.onAdd,
        onClear: this.onClear,
        onUpload: this.onUpload,
        onRemove: this.onRemove,
        onRetry: this.onRetry,
        onCancel: this.onCancel,
        onClick: this.onClick,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        ...p
      }
    );
  }
}
export {
  C as UploadNavigation
};
