/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as s from "react";
import { classNames as A } from "@progress/kendo-react-common";
import { UploadList as x } from "./UploadList.mjs";
import { UploadAddButton as I } from "./UploadAddButton.mjs";
import { UploadActionButtons as k } from "./UploadActionButtons.mjs";
import { UploadDropZone as F } from "./UploadDropZone.mjs";
const R = -1, m = class m extends s.Component {
  constructor() {
    super(...arguments), this._container = null, this._uploadAddButton = null, this.focus = () => {
      if (this._uploadAddButton)
        return this._uploadAddButton.focus();
    }, this.onAdd = (o) => {
      this.props.onAdd && this.props.onAdd.call(void 0, o);
    }, this.onRetry = (o) => {
      this.props.onRetry && this.props.onRetry.call(void 0, o);
    }, this.onCancel = (o) => {
      this.props.onCancel && this.props.onCancel.call(void 0, o);
    }, this.onClear = () => {
      this.props.onClear && this.props.onClear.call(void 0);
    }, this.onUpload = () => {
      this.props.onUpload && this.props.onUpload.call(void 0);
    }, this.onRemove = (o) => {
      this.props.onRemove && this.props.onRemove.call(void 0, o);
    }, this.onKeyDown = (o) => {
      this.props.onKeyDown && this.props.onKeyDown.call(void 0, o, this.isRtl);
    }, this.onFocus = (o) => {
      this.props.onFocus && this.props.onFocus.call(void 0, o);
    }, this.onBlur = (o) => {
      this.props.onBlur && this.props.onBlur.call(void 0, o);
    }, this.onClick = (o) => {
      this.props.onClick && this.props.onClick.call(void 0, o);
    };
  }
  get async() {
    const {
      autoUpload: o,
      batch: t,
      withCredentials: i,
      saveField: r,
      saveHeaders: l,
      saveMethod: e,
      saveUrl: n,
      responseType: d,
      removeField: a,
      removeHeaders: p,
      removeMethod: c,
      removeUrl: h
    } = this.props;
    return {
      autoUpload: o,
      batch: t,
      withCredentials: i,
      saveField: r,
      saveHeaders: l,
      saveMethod: e,
      saveUrl: n,
      responseType: d,
      removeField: a,
      removeHeaders: p,
      removeMethod: c,
      removeUrl: h
    };
  }
  get groupsCount() {
    return Object.keys(this.props.groupedFiles).length;
  }
  get lastGroupIndex() {
    return this.groupsCount - 1;
  }
  get addButtonIndex() {
    return R;
  }
  get clearButtonIndex() {
    return this.lastGroupIndex + 1;
  }
  get uploadButtonIndex() {
    return this.lastGroupIndex + 2;
  }
  get isRtl() {
    return this._container && getComputedStyle(this._container).direction === "rtl" || !1;
  }
  /**
   * @hidden
   */
  get actionElement() {
    if (this._uploadAddButton)
      return this._uploadAddButton.actionElement;
  }
  /**
   * @hidden
   */
  render() {
    const {
      multiple: o,
      disabled: t,
      tabIndex: i,
      accept: r,
      showFileList: l,
      groupedFiles: e,
      navigationIndex: n,
      showActionButtons: d,
      actionsLayout: a,
      notFocusedIndex: p,
      listItemUI: c,
      id: h,
      ariaLabelledBy: v,
      ariaDescribedBy: B,
      selectMessageUI: C
    } = this.props, y = A(
      "k-upload",
      this.props.className,
      t ? "k-disabled" : ""
    ), g = /* @__PURE__ */ s.createElement(
      I,
      {
        id: h,
        ariaLabelledBy: v,
        ariaDescribedBy: B,
        ref: (u) => this._uploadAddButton = u,
        accept: r,
        async: this.async,
        addButtonIndex: this.addButtonIndex,
        navigationIndex: n,
        notFocusedIndex: p,
        tabIndex: i,
        multiple: o,
        disabled: t,
        hasFiles: e ? Object.keys(e).length > 0 : !1,
        selectMessageUI: C,
        onAdd: this.onAdd,
        onClick: this.onClick
      }
    );
    return /* @__PURE__ */ s.createElement(
      "div",
      {
        ref: (u) => this._container = u,
        className: y,
        onKeyDown: this.onKeyDown,
        onFocus: this.onFocus,
        onBlur: this.onBlur
      },
      /* @__PURE__ */ s.createElement(
        F,
        {
          addButtonComponent: g,
          fileGroup: e,
          disabled: t,
          multiple: o,
          onAdd: this.onAdd
        }
      ),
      l ? /* @__PURE__ */ s.createElement(
        x,
        {
          groupedFiles: e,
          disabled: t,
          async: this.async,
          navigationIndex: n,
          listItemUI: c,
          onCancel: this.onCancel,
          onRemove: this.onRemove,
          onRetry: this.onRetry,
          onClick: this.onClick
        }
      ) : void 0,
      d ? /* @__PURE__ */ s.createElement(
        k,
        {
          disabled: t,
          navigationIndex: n,
          clearButtonIndex: this.clearButtonIndex,
          uploadButtonIndex: this.uploadButtonIndex,
          actionsLayout: a,
          onUpload: this.onUpload,
          onClear: this.onClear,
          onClick: this.onClick
        }
      ) : void 0
    );
  }
};
m.defaultProps = {
  disabled: !1,
  groupedFiles: {},
  multiple: !0,
  actionsLayout: "end"
};
let f = m;
export {
  f as UploadUI
};
