/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as n from "react";
import t from "prop-types";
import { useInternationalization as Ye, useLocalization as Je } from "@progress/kendo-react-intl";
import { createPropsContext as Qe, validatePackage as Xe, usePropsContext as Ze, useId as et, useCustomComponent as pe, dispatchEvent as Y, getActiveElement as be, useIsomorphicLayoutEffect as tt, classNames as nt, kendoThemeMaps as ge, getTabIndex as rt } from "@progress/kendo-react-common";
import { caretAltUpIcon as at, caretAltDownIcon as lt } from "@progress/kendo-svg-icons";
import { FloatingLabel as st } from "@progress/kendo-react-labels";
import { packageMetadata as ut } from "../package-metadata.mjs";
import { numericIncreaseValue as R, messages as B, numericDecreaseValue as M } from "../messages/index.mjs";
import { getInitialState as ve, formatValue as F, getStateOrPropsValue as J, rangeValue as T, sanitizeNumber as ye, decreaseValue as Ve, increaseValue as ke } from "./utils/index.mjs";
import { Button as Ce } from "@progress/kendo-react-buttons";
const ot = "Please enter a valid value!", ct = Qe(), Q = n.forwardRef((k, Ee) => {
  Xe(ut);
  const z = Ze(ct, k), {
    className: Se,
    value: p,
    defaultValue: xe,
    step: b,
    format: l,
    width: X,
    tabIndex: he,
    accessKey: Ie,
    title: Le,
    placeholder: Z,
    min: c,
    max: i,
    spinners: Oe,
    disabled: u,
    dir: ee,
    name: G,
    label: h,
    id: Pe,
    prefix: Ne,
    suffix: De,
    ariaDescribedBy: Re,
    validityStyles: te,
    ariaLabelledBy: Be,
    required: j,
    ariaLabel: Me,
    inputType: Fe,
    rangeOnEnter: ne,
    readOnly: g,
    onChange: C,
    onFocus: re,
    onBlur: ae,
    validationMessage: q,
    children: Te,
    size: A,
    rounded: _,
    fillMode: le,
    style: se,
    inputStyle: ze,
    valid: H,
    ...ue
  } = z, Ge = et(), oe = Pe || Ge, s = Ye(), I = Je(), a = n.useRef(null), L = n.useRef(), [je, E] = n.useState(!1), o = n.useRef(ve()), O = n.useRef(!1), K = n.useRef(), S = n.useRef(xe), x = F(
    o.current.focused && !u ? o.current.currentLooseValue : J(p, S.current),
    l,
    s
  );
  K.current = x;
  const [qe] = pe(Ne), [Ae] = pe(De);
  n.useEffect(
    () => {
      a.current && a.current.setCustomValidity && a.current.setCustomValidity(
        D().valid ? "" : q || ot
      );
    }
  );
  const ce = n.useCallback(
    () => {
      a.current && a.current.focus();
    },
    []
  ), P = n.useCallback(
    () => L.current !== void 0 ? L.current : J(p, S.current),
    [p]
  ), ie = n.useCallback(
    () => G,
    [G]
  ), N = n.useCallback(
    () => j,
    [j]
  ), D = n.useCallback(
    () => {
      const r = q !== void 0, e = P(), y = H !== void 0 ? H : !o.current.valueIsOutOfRange && (!N() || e != null);
      return {
        customError: r,
        valid: y,
        valueMissing: e == null
      };
    },
    [q, H, P, N]
  ), w = n.useCallback(
    () => te,
    [te]
  ), de = n.useCallback(
    () => z,
    [z]
  ), v = n.useCallback(
    () => {
      const r = {
        element: a.current,
        focus: ce
      };
      return Object.defineProperty(r, "name", { get: ie }), Object.defineProperty(r, "value", { get: P }), Object.defineProperty(r, "validity", { get: D }), Object.defineProperty(r, "validityStyles", { get: w }), Object.defineProperty(r, "required", { get: N }), Object.defineProperty(r, "props", { get: de }), r;
    },
    [ie, P, D, w, N, ce, de]
  );
  n.useImperativeHandle(Ee, v);
  const m = n.useCallback(
    () => ({
      eventValue: J(p, S.current),
      prevLooseValue: K.current,
      currentLooseValue: a.current.value,
      selectionStart: a.current.selectionStart,
      selectionEnd: a.current.selectionEnd,
      decimalSelect: !1,
      valueIsCorrected: !1,
      valueIsOutOfRange: !1,
      isPaste: O.current,
      focused: o.current.focused
    }),
    [p]
  ), f = n.useCallback(
    (r, e) => {
      if (u)
        return;
      L.current = e.eventValue, S.current = e.eventValue;
      const y = F(T(e.eventValue, c, i), l, s), d = T(s.parseNumber(y, l), c, i);
      d !== e.eventValue && (e.valueIsOutOfRange = !0, e.eventValue = d, S.current = d), p !== e.eventValue && Y(
        C,
        r,
        v(),
        { value: e.eventValue }
      ), L.current = void 0, o.current = e, E((W) => !W);
    },
    [p, C, u, E, v]
  ), _e = n.useCallback(
    (r) => {
      const e = m();
      O.current = !1, f(r, ye(e, l, s));
    },
    [l, C, s, f, m]
  ), He = n.useCallback(
    (r) => {
      let e = m();
      const y = s.parseNumber(String(e.currentLooseValue), l);
      if (e.selectionEnd > e.selectionStart && e.selectionEnd - e.selectionStart === String(e.currentLooseValue).length) {
        const d = s.numberSymbols(), V = d && r.key === d.minusSign, W = d && r.key === d.decimal;
        O.current = !V && !W;
        return;
      }
      switch (r.keyCode) {
        case 38:
          ke(
            y,
            e,
            b,
            c,
            i,
            l,
            s
          );
          break;
        case 40:
          Ve(
            y,
            e,
            b,
            c,
            i,
            l,
            s
          );
          break;
        case 13: {
          if (ne === !1)
            return;
          const d = F(T(y, c, i), l, s), V = T(s.parseNumber(d, l), c, i);
          e.eventValue = V, e.currentLooseValue = F(V, l, s), e.selectionStart = e.selectionEnd = e.currentLooseValue.length;
          break;
        }
        case 110: {
          const d = a.current, V = s.numberSymbols();
          d && (e.currentLooseValue = e.currentLooseValue.slice(0, e.selectionStart) + V.decimal + e.currentLooseValue.slice(e.selectionEnd), e.selectionStart = e.selectionEnd = e.selectionStart + 1, e = ye(e, l, s));
          break;
        }
        default:
          return;
      }
      r.preventDefault(), f(r, e);
    },
    [l, c, i, b, C, ne, f, m]
  ), Ke = n.useCallback(
    () => {
      O.current = !0;
    },
    []
  ), U = n.useCallback(
    (r) => {
      if (g || u)
        return;
      const e = m();
      ke(
        s.parseNumber(String(e.currentLooseValue), l),
        e,
        b,
        c,
        i,
        l,
        s
      ), f(r, e);
    },
    [l, c, i, b, C, g, u, f, m]
  ), $ = n.useCallback(
    (r) => {
      if (g || u)
        return;
      const e = m();
      Ve(
        s.parseNumber(String(e.currentLooseValue), l),
        e,
        b,
        c,
        i,
        l,
        s
      ), f(r, e);
    },
    [l, c, i, b, C, g, u, f, m]
  ), we = n.useCallback(
    (r) => {
      const e = be(document);
      !document || e !== a.current || !a.current || g || u || (r.nativeEvent.deltaY < 0 && U(r), r.nativeEvent.deltaY > 0 && $(r));
    },
    [U, $, u, g]
  ), Ue = n.useCallback(
    (r) => {
      o.current.currentLooseValue = K.current, o.current.focused = !0, Y(
        re,
        r,
        v(),
        {}
      ), E((e) => !e);
    },
    [re, E, v]
  ), $e = n.useCallback(
    (r) => {
      o.current = ve(), Y(
        ae,
        r,
        v(),
        {}
      ), E((e) => !e);
    },
    [ae, E, v]
  ), We = n.useCallback(
    (r) => {
      if (document && a.current) {
        const e = be(document);
        r.preventDefault(), e !== a.current && a.current.focus();
      }
    },
    []
  );
  tt(
    () => {
      a.current && a.current.type !== "number" && o.current.selectionStart !== void 0 && o.current.selectionEnd !== void 0 && (a.current.selectionStart = o.current.selectionStart, a.current.selectionEnd = o.current.selectionEnd, o.current.selectionStart = void 0, o.current.selectionEnd = void 0);
    },
    [je]
  );
  const me = !w() || D().valid, fe = /* @__PURE__ */ n.createElement(
    "span",
    {
      dir: ee,
      style: h ? se : { width: X, ...se },
      className: nt(
        "k-input",
        "k-numerictextbox",
        {
          [`k-input-${ge.sizeMap[A] || A}`]: A,
          [`k-input-${le}`]: le,
          [`k-rounded-${ge.roundedMap[_] || _}`]: _,
          "k-invalid": !me,
          "k-required": j,
          "k-disabled": u
        },
        Se
      ),
      "aria-disabled": u ? "true" : void 0,
      ...h ? {} : ue
    },
    /* @__PURE__ */ n.createElement(qe, null),
    /* @__PURE__ */ n.createElement(
      "input",
      {
        role: "spinbutton",
        value: x === null ? "" : x,
        tabIndex: rt(he, u),
        accessKey: Ie,
        disabled: u,
        title: Le,
        "aria-disabled": u ? "true" : void 0,
        "aria-valuemin": c,
        "aria-valuemax": i,
        "aria-label": Me,
        "aria-labelledby": Be,
        "aria-describedby": Re,
        placeholder: Z,
        spellCheck: !1,
        autoComplete: "off",
        autoCorrect: "off",
        type: Fe || "tel",
        className: "k-input-inner",
        id: oe,
        name: G,
        readOnly: g,
        style: ze,
        onChange: _e,
        onFocus: Ue,
        onBlur: $e,
        onKeyDown: He,
        onPaste: Ke,
        onWheel: we,
        ref: a
      }
    ),
    /* @__PURE__ */ n.createElement(Ae, null),
    Te,
    Oe && /* @__PURE__ */ n.createElement(
      "span",
      {
        className: "k-input-spinner k-spin-button",
        onMouseDown: We
      },
      /* @__PURE__ */ n.createElement(
        Ce,
        {
          tabIndex: -1,
          type: "button",
          icon: "caret-alt-up",
          svgIcon: at,
          rounded: null,
          className: "k-spinner-increase",
          "aria-label": I.toLanguageString(R, B[R]),
          title: I.toLanguageString(R, B[R]),
          onClick: U
        }
      ),
      /* @__PURE__ */ n.createElement(
        Ce,
        {
          tabIndex: -1,
          type: "button",
          icon: "caret-alt-down",
          svgIcon: lt,
          rounded: null,
          className: "k-spinner-decrease",
          "aria-label": I.toLanguageString(M, B[M]),
          title: I.toLanguageString(M, B[M]),
          onClick: $
        }
      )
    )
  );
  return h ? /* @__PURE__ */ n.createElement(
    st,
    {
      label: h,
      editorId: oe,
      editorValue: x === null ? "" : x,
      editorValid: me,
      editorDisabled: u,
      editorPlaceholder: Z,
      children: fe,
      style: { width: X },
      dir: ee,
      ...ue
    }
  ) : fe;
});
Q.propTypes = {
  value: t.number,
  defaultValue: t.number,
  step: t.number,
  format: t.oneOfType([
    t.string,
    t.shape({
      style: t.oneOf(["decimal", "currency", "percent", "scientific", "accounting"]),
      currency: t.string,
      currencyDisplay: t.oneOf(["symbol", "code", "name"]),
      useGrouping: t.bool,
      minimumIntegerDigits: t.number,
      minimumFractionDigits: t.number,
      maximumFractionDigits: t.number
    })
  ]),
  width: t.oneOfType([
    t.string,
    t.number
  ]),
  tabIndex: t.number,
  accessKey: t.string,
  title: t.string,
  placeholder: t.string,
  min: t.number,
  max: t.number,
  spinners: t.bool,
  disabled: t.bool,
  readOnly: t.bool,
  dir: t.string,
  name: t.string,
  label: t.string,
  validationMessage: t.string,
  required: t.bool,
  id: t.string,
  rangeOnEnter: t.bool,
  ariaLabelledBy: t.string,
  ariaDescribedBy: t.string,
  ariaLabel: t.string,
  onChange: t.func,
  onFocus: t.func,
  onBlur: t.func,
  size: t.oneOf([null, "small", "medium", "large"]),
  rounded: t.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: t.oneOf([null, "solid", "flat", "outline"])
};
Q.displayName = "KendoNumericTextBox";
Q.defaultProps = {
  prefix: (k) => null,
  suffix: (k) => null,
  step: 1,
  spinners: !0,
  disabled: !1,
  required: !1,
  validityStyles: !0,
  rangeOnEnter: !0,
  onChange: (k) => {
  },
  onFocus: (k) => {
  },
  onBlur: (k) => {
  },
  size: "medium",
  rounded: "medium",
  fillMode: "solid"
};
export {
  Q as NumericTextBox,
  ct as NumericTextBoxPropsContext
};
