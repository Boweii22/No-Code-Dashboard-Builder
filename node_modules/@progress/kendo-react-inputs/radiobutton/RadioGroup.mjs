/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import e from "prop-types";
import { RadioButton as q } from "./RadioButton.mjs";
import { createPropsContext as A, validatePackage as J, usePropsContext as Q, focusFirstFocusableChild as U, dispatchEvent as g, useId as W, classNames as P, useRtl as X } from "@progress/kendo-react-common";
import { packageMetadata as Y } from "../package-metadata.mjs";
const Z = A(), m = t.forwardRef((r, E) => {
  J(Y);
  const b = Q(Z, r), {
    id: I,
    ariaLabelledBy: N,
    ariaDescribedBy: B,
    className: F,
    data: p,
    defaultValue: x,
    disabled: l,
    name: G,
    labelPlacement: V,
    layout: n,
    style: O,
    value: f,
    valid: j,
    item: z = R.item,
    onChange: c,
    onFocus: i
  } = b, o = t.useRef(null), y = t.useCallback(
    () => {
      o.current && U(o.current);
    },
    []
  ), d = t.useCallback(
    () => ({
      element: o.current,
      focus: y
    }),
    [y]
  );
  t.useImperativeHandle(E, d);
  const [D, C] = t.useState(x), h = f !== void 0, u = h ? f : D, H = t.useCallback(
    (a) => {
      let s = a.value;
      !h && !l && C(s), c && !l && g(
        c,
        a.syntheticEvent,
        d(),
        { value: s }
      );
    },
    [C, c, l]
  ), L = t.useCallback(
    (a) => {
      i && !l && g(
        i,
        a.syntheticEvent,
        d(),
        void 0
      );
    },
    [i, l]
  ), S = W(), T = P(
    "k-radio-list",
    {
      "k-list-horizontal": n === "horizontal",
      "k-list-vertical": n === "vertical" || n === void 0
    },
    F
  ), w = X(o, b.dir), K = p && p.map((a, s) => {
    const k = u === a.value, M = u == null, v = {
      ...a,
      valid: j,
      checked: k,
      disabled: !!(a.disabled || l),
      labelPlacement: a.labelPlacement ? a.labelPlacement : V,
      tabIndex: a.tabIndex ? a.tabIndex : M && s === 0 || k ? 0 : -1,
      index: s,
      name: G || S,
      onChange: H,
      onFocus: L
    };
    return /* @__PURE__ */ t.createElement(
      z,
      {
        className: P("k-radio-item", { "k-disabled": v.disabled || l }),
        key: s,
        role: "none"
      },
      /* @__PURE__ */ t.createElement(q, { ...v })
    );
  });
  return /* @__PURE__ */ t.createElement(
    "ul",
    {
      id: I,
      role: "radiogroup",
      className: T,
      ref: o,
      dir: w,
      style: O,
      "aria-labelledby": N,
      "aria-describedby": B
    },
    K
  );
}), R = {
  item: (r) => /* @__PURE__ */ t.createElement("li", { ...r })
};
m.propTypes = {
  ariaLabelledBy: e.string,
  ariaDescribedBy: e.string,
  className: e.string,
  data: e.arrayOf(e.object),
  defaultValue: e.any,
  dir: e.string,
  disabled: e.bool,
  labelPlacement: e.string,
  layout: e.string,
  name: e.string,
  style: e.object,
  value: e.any,
  onChange: e.func,
  onFocus: e.func
};
m.defaultProps = R;
m.displayName = "KendoRadioGroup";
export {
  m as RadioGroup,
  Z as RadioGroupPropsContext
};
