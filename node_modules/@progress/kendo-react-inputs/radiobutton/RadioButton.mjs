/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import a from "prop-types";
import { createPropsContext as w, validatePackage as K, usePropsContext as L, useId as O, dispatchEvent as u, classNames as S, kendoThemeMaps as $, getTabIndex as q } from "@progress/kendo-react-common";
import { packageMetadata as A } from "../package-metadata.mjs";
const G = w(), m = e.forwardRef((C, y) => {
  K(A);
  const B = L(G, C), {
    ariaDescribedBy: P,
    checked: x,
    children: b,
    className: F,
    disabled: n,
    id: p,
    size: s,
    label: r,
    labelPlacement: I,
    name: E,
    style: R,
    tabIndex: N,
    value: c,
    valid: z,
    onChange: f,
    onFocus: i,
    onBlur: d,
    ...T
  } = B, l = e.useRef(null), g = e.useCallback(
    () => {
      l.current && l.current.focus();
    },
    []
  ), o = e.useCallback(
    () => ({
      element: l.current,
      focus: g
    }),
    [g]
  );
  e.useImperativeHandle(y, o);
  const h = O(), M = e.useCallback(
    (t) => {
      u(
        f,
        t,
        o(),
        { value: c }
      );
    },
    [f, c, n]
  ), D = e.useCallback(
    (t) => {
      i && !n && u(
        i,
        t,
        o(),
        void 0
      );
    },
    [i, n]
  ), H = e.useCallback(
    (t) => {
      d && !n && u(
        d,
        t,
        o(),
        void 0
      );
    },
    [d, n]
  ), j = {
    type: "radio",
    id: p || h,
    name: E,
    className: S(
      "k-radio",
      {
        [`k-radio-${$.sizeMap[s] || s}`]: s,
        "k-invalid": z === !1
      },
      F
    ),
    ref: l,
    disabled: n,
    tabIndex: q(N, n),
    checked: x,
    style: R,
    "aria-describedby": P,
    value: c,
    onChange: M,
    onFocus: D,
    onBlur: H,
    ...T
  }, k = /* @__PURE__ */ e.createElement(e.Fragment, null, r !== void 0 ? /* @__PURE__ */ e.createElement(
    "label",
    {
      className: "k-radio-label",
      htmlFor: p || h,
      style: { userSelect: "none" },
      "aria-label": r
    },
    r
  ) : null), v = /* @__PURE__ */ e.createElement("input", { ...j });
  return I === "before" ? /* @__PURE__ */ e.createElement(e.Fragment, null, k, v, b) : /* @__PURE__ */ e.createElement(e.Fragment, null, v, k, b);
});
m.propTypes = {
  ariaDescribedBy: a.string,
  checked: a.bool,
  className: a.string,
  disabled: a.bool,
  id: a.string,
  size: a.oneOf([null, "small", "medium", "large"]),
  label: a.string,
  labelPlacement: a.string,
  name: a.string,
  style: a.object,
  tabIndex: a.number,
  value: a.any,
  valid: a.bool,
  onChange: a.func,
  onFocus: a.func,
  onBlur: a.func
};
const J = {
  size: "medium"
};
m.displayName = "KendoRadioButton";
m.defaultProps = J;
export {
  m as RadioButton,
  G as RadioButtonPropsContext
};
