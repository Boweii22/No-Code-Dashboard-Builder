/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import { NumericTextBox as g } from "../numerictextbox/NumericTextBox.mjs";
import b from "./HexInput.mjs";
import { Button as u } from "@progress/kendo-react-buttons";
import { Label as o } from "@progress/kendo-react-labels";
import { caretAltExpandIcon as f } from "@progress/kendo-svg-icons";
import { provideLocalizationService as x, registerForIntl as k, registerForLocalization as v } from "@progress/kendo-react-intl";
import { colorGradientR as n, messages as r, colorGradientHex as C, colorGradientG as E, colorGradientB as M, colorGradientA as R, colorGradientToggleInputsButton as l } from "../messages/index.mjs";
const i = ["rgba", "rgb", "hex"];
class p extends t.Component {
  constructor(e) {
    super(e), this.onRgbaRChange = (a) => {
      this.dispatchRgbaChange({ r: a.value }, a);
    }, this.onRgbaGChange = (a) => {
      this.dispatchRgbaChange({ g: a.value }, a);
    }, this.onRgbaBChange = (a) => {
      this.dispatchRgbaChange({ b: a.value }, a);
    }, this.onRgbaAChange = (a) => {
      this.dispatchRgbaChange({ a: a.value }, a);
    }, this.state = { inputMode: e.defaultInputMode || i[1] };
  }
  render() {
    const e = x(this), a = e.toLanguageString(n, r[C]), s = e.toLanguageString(n, r[n]), c = e.toLanguageString(n, r[E]), h = e.toLanguageString(n, r[M]), d = e.toLanguageString(n, r[R]), m = e.toLanguageString(l, r[l]);
    return /* @__PURE__ */ t.createElement("div", { className: "k-colorgradient-inputs k-hstack" }, /* @__PURE__ */ t.createElement("div", { className: "k-vstack" }, /* @__PURE__ */ t.createElement(
      u,
      {
        "aria-label": m,
        fillMode: "flat",
        icon: "caret-alt-expand",
        svgIcon: f,
        className: "k-colorgradient-toggle-mode k-icon-button",
        onClick: this.onToggleModeChange.bind(this)
      }
    )), this.state.inputMode === "hex" && /* @__PURE__ */ t.createElement("div", { className: "k-vstack k-flex-1" }, /* @__PURE__ */ t.createElement("span", { className: "k-hex-value k-textbox k-input" }, /* @__PURE__ */ t.createElement(
      b,
      {
        hex: this.props.hex,
        onHexChange: this.props.onHexChange,
        disabled: this.props.disabled
      }
    )), /* @__PURE__ */ t.createElement(o, { className: "k-colorgradient-input-label" }, a)), (this.state.inputMode === "rgb" || this.state.inputMode === "rgba") && /* @__PURE__ */ t.createElement(t.Fragment, null, /* @__PURE__ */ t.createElement("div", { className: "k-vstack" }, /* @__PURE__ */ t.createElement(
      g,
      {
        inputType: "number",
        value: this.props.rgba.r,
        ariaLabel: String(this.props.rgba.r),
        min: 0,
        max: 255,
        spinners: !1,
        format: "n",
        onChange: this.onRgbaRChange,
        disabled: this.props.disabled
      }
    ), /* @__PURE__ */ t.createElement(o, { className: "k-colorgradient-input-label" }, s)), /* @__PURE__ */ t.createElement("div", { className: "k-vstack" }, /* @__PURE__ */ t.createElement(
      g,
      {
        inputType: "number",
        value: this.props.rgba.g,
        ariaLabel: String(this.props.rgba.g),
        min: 0,
        max: 255,
        spinners: !1,
        format: "n",
        onChange: this.onRgbaGChange,
        disabled: this.props.disabled
      }
    ), /* @__PURE__ */ t.createElement(o, { className: "k-colorgradient-input-label" }, c)), /* @__PURE__ */ t.createElement("div", { className: "k-vstack" }, /* @__PURE__ */ t.createElement(
      g,
      {
        inputType: "number",
        value: this.props.rgba.b,
        ariaLabel: String(this.props.rgba.b),
        min: 0,
        max: 255,
        spinners: !1,
        format: "n",
        onChange: this.onRgbaBChange,
        disabled: this.props.disabled
      }
    ), /* @__PURE__ */ t.createElement(o, { className: "k-colorgradient-input-label" }, h))), this.state.inputMode === "rgba" && /* @__PURE__ */ t.createElement("div", { className: "k-vstack" }, this.props.opacity && /* @__PURE__ */ t.createElement(
      g,
      {
        inputType: "number",
        value: this.props.rgba.a,
        ariaLabel: String(this.props.rgba.a),
        min: 0,
        max: 1,
        step: 0.01,
        spinners: !1,
        format: "n2",
        onChange: this.onRgbaAChange,
        disabled: this.props.disabled
      }
    ), this.props.opacity && /* @__PURE__ */ t.createElement(o, { className: "k-colorgradient-input-label" }, d)));
  }
  dispatchRgbaChange(e, a) {
    let s = { ...this.props.rgba };
    e.r !== void 0 && (s.r = e.r), e.g !== void 0 && (s.g = e.g), e.b !== void 0 && (s.b = e.b), e.a !== void 0 && (s.a = e.a), this.props.onRgbaChange(s, a);
  }
  onToggleModeChange() {
    const e = i.length - 1 === i.indexOf(this.state.inputMode) ? 0 : i.indexOf(this.state.inputMode) + 1;
    if (this.props.opacity)
      this.setState({ inputMode: i[e] });
    else {
      const a = i[e] === "rgba" ? e + 1 : e;
      this.setState({ inputMode: i[a] });
    }
  }
}
k(p);
v(p);
export {
  p as default
};
