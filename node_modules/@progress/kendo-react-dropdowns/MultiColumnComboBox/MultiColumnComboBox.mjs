/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright © 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import ae from "prop-types";
import { PopupPropsContext as ne } from "@progress/kendo-react-popup";
import { MultiColumnList as le } from "../common/MultiColumnList.mjs";
import { createPropsContext as se, usePropsContext as ue, getScrollbarWidth as ie, getter as G, classNames as T, setScrollbarWidth as de } from "@progress/kendo-react-common";
import { ComboBox as ce, ComboBoxWithoutContext as pe } from "../ComboBox/ComboBox.mjs";
import { getItemValue as me } from "../common/utils.mjs";
import W from "../common/withCustomComponent.mjs";
const fe = (s, h) => s ? typeof s == "number" ? s + "px" : s : h, ge = se(), x = e.forwardRef((s, h) => {
  const t = ue(ge, s), C = e.useRef(null), a = e.useRef(null), y = ie(), {
    columns: n = d.columns,
    popupSettings: p = d.popupSettings,
    className: z,
    size: Ce,
    prefix: O = void 0,
    suffix: $ = void 0,
    onOpen: w,
    onClose: E,
    onFocus: F,
    onBlur: H,
    onChange: N,
    onFilterChange: S,
    onPageChange: M,
    ...L
  } = t;
  e.useImperativeHandle(C, () => ({
    element: a.current && a.current.element,
    focus() {
      a.current && a.current.focus();
    },
    get value() {
      return a.current && a.current.value;
    },
    get name() {
      return a.current && a.current.name;
    },
    props: t
  })), e.useImperativeHandle(h, () => C.current);
  const c = e.useMemo(
    () => {
      if (t.groupField !== void 0 && t.data)
        return me(t.data[0], t.groupField);
    },
    [t.data, t.groupField]
  ), [k, m] = e.useState(c), [R, B] = e.useState(!0), [j] = O ? W(t.prefix || e.Fragment) : [], [V] = $ ? W(t.suffix || e.Fragment) : [], A = e.useMemo(
    () => {
      const r = /* @__PURE__ */ e.createElement("th", { className: "k-table-th", colSpan: n.length }, k);
      return /* @__PURE__ */ e.createElement(e.Fragment, null, t.header, /* @__PURE__ */ e.createElement("div", { className: "k-table-header-wrap" }, /* @__PURE__ */ e.createElement("table", { className: "k-table", role: "presentation" }, /* @__PURE__ */ e.createElement("colgroup", null, n.map(
        (o, u) => /* @__PURE__ */ e.createElement(
          "col",
          {
            key: o.uniqueKey ? o.uniqueKey : u,
            style: { width: o.width ? o.width : d.width }
          }
        )
      )), /* @__PURE__ */ e.createElement("thead", { className: "k-table-thead" }, /* @__PURE__ */ e.createElement("tr", { className: "k-table-row" }, n.map((o, u) => /* @__PURE__ */ e.createElement("th", { className: "k-table-th", key: o.uniqueKey ? o.uniqueKey : u }, o.header || " "))), k && R && /* @__PURE__ */ e.createElement("tr", { className: "k-table-group-row" }, t.groupStickyHeaderItemRender ? t.groupStickyHeaderItemRender.call(void 0, r, {}) : r)))));
    },
    [t.header, n, k, R]
  ), D = e.useMemo(
    () => (
      // These additional 4px are coming from the child elements side borders (fixes horizontal scrollbar)
      `calc(${n.map((r) => fe(r.width, d.width)).filter(Boolean).join(" + ")} + ${y}px + 4px)`
    ),
    [n, y]
  ), q = t.virtual ? t.virtual.skip : 0, J = e.useCallback(
    (r, o) => {
      const u = n.map((i, oe) => /* @__PURE__ */ e.createElement(
        "span",
        {
          className: t.itemRender ? void 0 : "k-table-td",
          style: t.itemRender ? void 0 : { width: i.width ? i.width : d.width },
          key: i.uniqueKey ? i.uniqueKey : oe
        },
        i.field ? String(G(i.field)(o.dataItem)) : ""
      ));
      let f, g, b, v, I = t.data || [];
      const K = o.index - q;
      t.groupField !== void 0 && (v = G(t.groupField), g = v(I[K]), b = v(I[K - 1]), g && b && g !== b && (f = g)), f && t.groupMode === "classic" && u.push(/* @__PURE__ */ e.createElement("div", { key: "group", className: "k-table-td k-table-group-td" }, /* @__PURE__ */ e.createElement("span", null, f)));
      const P = e.cloneElement(r, {
        ...r.props,
        className: T("k-table-row", {
          "k-table-alt-row": o.index % 2 !== 0,
          "k-focus": o.focused,
          "k-selected": o.selected,
          "k-first": !!f,
          "k-disabled": o.dataItem.disabled
        })
      }, u);
      return t.itemRender ? t.itemRender.call(void 0, P, o) : P;
    },
    [n, t.groupField, t.itemRender, t.data, q]
  ), l = e.useCallback(
    (r, o) => {
      r && r.call(void 0, {
        ...o,
        target: C.current
      });
    },
    []
  ), Q = e.useCallback((r) => (t.virtual || m(c), l(w, r)), [l, w, t.virtual, c]), U = e.useCallback((r) => l(E, r), [E]), X = e.useCallback((r) => l(F, r), [F]), Y = e.useCallback((r) => l(H, r), [H]), Z = e.useCallback((r) => l(N, r), [N]), _ = e.useCallback((r) => l(M, r), [M]), ee = e.useCallback((r) => (m(c), l(S, {
    ...r,
    mobileMode: r.target.mobileMode
  })), [S]), te = e.useCallback(
    (r) => {
      m(r.group);
    },
    []
  );
  e.useEffect(() => {
    de();
  }), e.useEffect(() => {
    const r = t.data;
    m(c), r && r.length !== 0 ? B(!0) : B(!1);
  }, [t.data]);
  const re = e.useCallback((r) => /* @__PURE__ */ e.createElement(le, { ...r }), []);
  return /* @__PURE__ */ e.createElement(
    ne.Provider,
    {
      value: (r) => ({ ...r, popupClass: `k-dropdowngrid-popup ${p.popupClass}` })
    },
    /* @__PURE__ */ e.createElement(
      ce,
      {
        ...L,
        list: re,
        popupSettings: {
          ...p,
          width: p.width || D,
          className: p.className
        },
        ref: a,
        header: A,
        itemRender: J,
        groupHeaderItemRender: t.groupHeaderItemRender,
        size: t.size,
        rounded: t.rounded,
        fillMode: t.fillMode,
        groupMode: t.groupMode,
        groupField: t.groupField,
        isMultiColumn: !0,
        onOpen: Q,
        onClose: U,
        onFocus: X,
        onBlur: Y,
        onChange: Z,
        onFilterChange: ee,
        onPageChange: _,
        onGroupScroll: te,
        className: T("k-dropdowngrid", z),
        required: t.required,
        adaptive: t.adaptive,
        adaptiveFilter: t.adaptiveFilter,
        adaptiveTitle: t.adaptiveTitle,
        footer: t.footer,
        footerClassName: "k-table-footer",
        prefix: j,
        suffix: V
      }
    )
  );
}), he = {
  ...pe.propTypes,
  columns: ae.any.isRequired
}, d = {
  columns: [],
  popupSettings: {},
  width: "200px",
  size: "medium",
  rounded: "medium",
  fillMode: "solid"
};
x.displayName = "KendoMultiColumnComboBox";
x.propTypes = he;
x.defaultProps = d;
export {
  x as MultiColumnComboBox,
  ge as MultiColumnComboBoxPropsContext
};
