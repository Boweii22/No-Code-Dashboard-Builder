/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as h from "react";
import f from "prop-types";
import V from "../common/DropDownBase.mjs";
import { Keys as x, validatePackage as se, svgIconPropType as ie, canUseDOM as L, classNames as E, IconWrap as oe, createPropsContext as ae, withIdHOC as ne, withPropsContext as le, kendoThemeMaps as re } from "@progress/kendo-react-common";
import { FloatingLabel as de } from "@progress/kendo-react-labels";
import { getPlainDataDuplicates as pe, areSame as S, getItemValue as C, isPresent as k, getItemIndexByText as R, suggestValue as he, itemIndexStartsWith as A } from "../common/utils.mjs";
import ce from "../common/SearchBar.mjs";
import ue from "../common/ListContainer.mjs";
import ge from "../common/List.mjs";
import me from "../common/ListFilter.mjs";
import K from "../common/GroupStickyHeader.mjs";
import { packageMetadata as ve } from "../package-metadata.mjs";
import fe from "../common/ClearButton.mjs";
import { Button as z } from "@progress/kendo-react-buttons";
import { caretAltDownIcon as be, xIcon as xe } from "@progress/kendo-svg-icons";
import { comboArrowBtnAriaLabelExpand as H, messages as q, comboArrowBtnAriaLabelCollapse as $ } from "../messages/index.mjs";
import { provideLocalizationService as G } from "@progress/kendo-react-intl";
import { ActionSheet as Ie, ActionSheetHeader as ye, ActionSheetContent as ke } from "@progress/kendo-react-layout";
import { MOBILE_MEDIUM_DEVISE as W, MOBILE_SMALL_DEVISE as U } from "../common/constants.mjs";
import j from "../common/withCustomComponent.mjs";
const Se = "Please enter a valid value!", { sizeMap: F, roundedMap: Ce } = re, D = class D extends h.Component {
  constructor(s) {
    super(s), this.state = {}, this.base = new V(this), this._element = null, this._suggested = "", this._skipBlur = !1, this._input = null, this._adaptiveFilterInput = null, this.itemHeight = 0, this.duplicates = [], this.hasDuplicates = !1, this.focus = () => {
      this._input && this._input.focus();
    }, this.checkForDuplicatePlainTextRecords = () => {
      const e = this.props.textField !== void 0, t = this.props.dataItemKey !== void 0;
      if (this.props.data && this.props.data.length > 0 && !e && !t) {
        const a = this.props.data;
        this.duplicates = pe(a), this.hasDuplicates = this.duplicates.length > 0;
      }
    }, this.handleItemSelect = (e, t) => {
      const { data: a = [], virtual: o, dataItemKey: n } = this.props, d = o ? o.skip : 0, l = a[e - d], r = this.hasDuplicates || !S(l, this.value, n);
      this.triggerOnChange(l, t), this.state.text !== void 0 && (t.data.text = void 0), r && this.base.triggerPageChangeCornerItems(l, t);
    }, this.onPopupOpened = () => {
      setTimeout(() => {
        this.mobileMode && this._adaptiveFilterInput && (this._skipBlur = !0, this._adaptiveFilterInput.focus(), this._skipBlur = !1);
      }, 300);
    }, this.componentRef = (e) => {
      this._element = e, this.base.wrapper = e;
    }, this.toggleBtnClick = (e) => {
      const { data: t = [], skipDisabledItems: a, textField: o } = this.props, n = this.getFocusedIndex(), d = this.getCurrentValueDisabledStatus(o, t, n), l = this.props.opened !== void 0 ? this.props.opened : this.state.opened, r = this.base.initState();
      if (r.syntheticEvent = e, !a && o && d && this.clearValueOnToggleBtnClick(e), this.base.togglePopup(r), !l && this.mobileMode) {
        const i = this.props.adaptiveFilter !== void 0 ? this.props.adaptiveFilter : this.state.text || null;
        this.base.filterChanged(i, r);
      }
      this.applyState(r);
    }, this.closeOpenedApplyStateNonMobileMode = (e, t) => {
      t && !this.mobileMode && this.base.togglePopup(e);
    }, this.renderMobileListFilter = () => {
      const e = this.props.adaptiveFilter !== void 0 ? this.props.adaptiveFilter : this.state.text, t = C(this.value, this.props.textField), a = k(e) ? e : t;
      return /* @__PURE__ */ h.createElement(
        me,
        {
          value: a,
          ref: (o) => this._adaptiveFilterInput = o && o.element,
          onChange: this.handleMobileFilterChange,
          onKeyDown: this.onInputKeyDown,
          size: this.props.size,
          rounded: this.props.rounded,
          fillMode: this.props.fillMode
        }
      );
    }, this.handleMobileFilterChange = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e.syntheticEvent, t.data.text = e.target.value, this.base.filterChanged(e.target.value, t), this.applyState(t);
    }, this.onScroll = (e) => {
      const { vs: t, list: a } = this.base;
      t.scrollHandler(e);
      const { groupField: o } = this.props;
      let { data: n = [] } = this.props;
      if (!o || !n.length)
        return;
      const d = this.itemHeight = this.itemHeight || (t.enabled ? t.itemHeight : a ? a.children[0].offsetHeight : 0), r = e.target.scrollTop - t.skip * d;
      this.props.groupMode === "modern" && (n = this.base.getGroupedDataModernMode(n, o));
      let i = n[0][o];
      for (let c = 1; c < n.length && !(d * c > r); c++)
        n[c] && n[c][o] && (i = n[c][o]);
      i !== this.state.group && (this.setState({
        group: i
      }), this.props.onGroupScroll && this.props.onGroupScroll.call(void 0, { group: i }));
    }, this.handleItemClick = (e, t) => {
      this.navigationIndex = e, this.base.handleItemClick(e, t), this._valueDuringOnChange = void 0;
    }, this.handleBlur = (e) => {
      if (this.state.focused && !this._skipBlur) {
        const t = this.base.initState(), { textField: a, data: o = [] } = this.props, n = this.getFocusedIndex(), l = !(n === -1) && this.getCurrentValueDisabledStatus(a, o, n);
        t.data.focused = !1, t.events.push({ type: "onBlur" }), t.syntheticEvent = e, a && l && this.clearValueOnBlur(e), this.applyValueOnRejectSuggestions(e.currentTarget.value, t);
      }
    }, this.onInputClick = (e) => {
      const t = this.props.opened !== void 0 ? this.props.opened : this.state.opened, a = this.props.adaptiveFilter !== void 0 ? this.props.adaptiveFilter : this.state.text || null;
      if (!t && this.mobileMode) {
        const o = this.base.initState();
        o.syntheticEvent = e, this.base.togglePopup(o), this.base.filterChanged(a, o), this.applyState(o);
      }
    }, this.onInputKeyDown = (e) => {
      const { data: t = [], skipDisabledItems: a, textField: o, dataItemKey: n, groupField: d } = this.props, l = this.value, r = Math.max(0, t.findIndex((u) => S(u, l, n))), i = e.keyCode, c = this.props.opened !== void 0 ? this.props.opened : this.state.opened, p = this.base.initState();
      if (p.syntheticEvent = e, !e.altKey && (i === x.up || i === x.down)) {
        if (e.preventDefault(), d !== "" && o)
          if (!this.props.skipDisabledItems && c)
            this.onNavigate(p, i);
          else {
            let u = 0;
            if (i === x.down || i === x.right) {
              const m = t.slice(r + 1 < t.length ? r + 1 : r).find((b) => !b.disabled && b[o]);
              u = m && t.findIndex((b) => b[o] === m[o]);
            } else if (i === x.up || i === x.left) {
              let m;
              if (r === 0)
                m = t, u = t.findIndex((b) => !b.disabled && b[o]);
              else {
                m = t.slice(0, r);
                let b = m.pop();
                for (; b && b.disabled; )
                  b = m.pop();
                u = b && t.findIndex((w) => w[o] === b[o]);
              }
            }
            if (u !== void 0) {
              const m = u - r;
              this.onNavigate(p, i, m);
            } else
              u === void 0 && t.findIndex((m) => m[o] === l[o]) === t.length - 1 && this.onNavigate(p, i);
          }
        else if (!this.props.skipDisabledItems && c)
          this.onNavigate(p, i);
        else {
          let u = null;
          if (i === x.down || i === x.right)
            u = t.slice(r + 1).find((m) => !m.disabled);
          else if (i === x.up || i === x.left) {
            const m = t.slice(0, r);
            for (u = m.pop(); u && u.disabled; )
              u = m.pop();
          }
          if (u) {
            const m = u.id - r - 1;
            this.onNavigate(p, i, m);
          } else
            this.onNavigate(p, i);
        }
        this.applyState(p);
      }
      const g = () => {
        e.preventDefault(), this.base.togglePopup(p), this.applyState(p);
      }, I = this.getFocusedIndex(), v = I === -1, y = !v && this.getCurrentValueDisabledStatus(o, t, I);
      c ? i === x.pageUp ? this.base.scrollPopupByPageSize(-1) : i === x.pageDown ? this.base.scrollPopupByPageSize(1) : e.altKey && i === x.up ? g() : i === x.enter ? (e.preventDefault(), (o && !v && e.currentTarget.value ? t[I][o] : void 0) ? !a && o && y ? this.clearValueOnEnterOrEsc(e) : y || this.applyValueOnEnter(e.currentTarget.value, p) : this.applyValueOnEnter(e.currentTarget.value, p)) : i === x.esc && (!a && o && y && this.clearValueOnEnterOrEsc(e), this.applyValueOnRejectSuggestions(e.currentTarget.value, p)) : !c && i === x.esc ? this.clearValueOnEnterOrEsc(e) : e.altKey && i === x.down && g();
    }, this.inputOnChange = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e;
      const a = this.props.opened !== void 0 ? this.props.opened : this.state.opened, o = e.currentTarget, n = o.value;
      if (this.props.suggest) {
        const d = o.selectionEnd === n.length;
        let l = this.props.filter !== void 0 ? this.props.filter : this.state.text;
        k(l) || (l = C(this.value, this.props.textField) || "");
        const r = l && l === n, i = l && l.length > n.length;
        r || i || !d ? this._suggested = "" : this.suggestValue(n);
      }
      this.props.filter === void 0 && (t.data.text = n), this.state.focusedItem !== void 0 && (t.data.focusedItem = void 0), a || this.base.togglePopup(t), this.base.filterChanged(n, t), this.applyState(t), this.setState({ group: void 0 });
    }, this.clearButtonClick = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.clearValueOnEnterOrEsc = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.clearValueOnBlur = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.clearValueOnToggleBtnClick = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.setValidity = () => {
      this._input && this._input.setCustomValidity && this._input.setCustomValidity(
        this.validity.valid ? "" : this.props.validationMessage || Se
      );
    }, se(ve);
  }
  get _inputId() {
    return this.props.id;
  }
  get document() {
    if (L)
      return this.element && this.element.ownerDocument || document;
  }
  /** @hidden */
  get element() {
    return this._element;
  }
  /**
   * The mobile mode of the ComboBox.
   */
  get mobileMode() {
    return !!(this.state.windowWidth && this.state.windowWidth <= W && this.props.adaptive);
  }
  /**
   * The value of the ComboBox.
   */
  get value() {
    if (this._valueDuringOnChange !== void 0)
      return this._valueDuringOnChange;
    if (this.props.value !== void 0)
      return this.props.value;
    if (this.state.value !== void 0)
      return this.state.value;
    if (this.props.defaultValue !== void 0)
      return this.props.defaultValue;
  }
  /**
   * The index of the selected item.
   */
  get index() {
    const { data: s = [], dataItemKey: e } = this.props, t = this.value;
    return s.findIndex((a) => S(a, t, e));
  }
  /**
   * Gets the `name` property of the ComboBox.
   */
  get name() {
    return this.props.name;
  }
  /**
   * Represents the validity state into which the component is set.
   */
  get validity() {
    const s = this.props.validationMessage !== void 0, e = !this.required || this.value !== null && this.value !== "" && this.value !== void 0, t = this.props.valid !== void 0 ? this.props.valid : e;
    return {
      customError: s,
      valid: t,
      valueMissing: this.value === null
    };
  }
  get validityStyles() {
    return this.props.validityStyles !== void 0 ? this.props.validityStyles : D.defaultProps.validityStyles;
  }
  /** @hidden */
  get required() {
    return this.props.required !== void 0 ? this.props.required : D.defaultProps.required;
  }
  /** @hidden */
  componentDidUpdate(s, e) {
    var g;
    const { dataItemKey: t, virtual: a, groupField: o = "", data: n = [], textField: d } = this.props, l = s.virtual ? s.virtual.total : 0, r = this.props.opened !== void 0 ? this.props.opened : this.state.opened, i = s.opened !== void 0 ? s.opened : e.opened;
    s.data !== n && this.checkForDuplicatePlainTextRecords();
    const c = !i && r, p = this.value;
    if (this._valueOnDidUpdate = p, a && a.total !== l)
      this.base.vs.calcScrollElementHeight(), this.base.vs.reset();
    else {
      const I = s.value !== void 0 ? s.value : e.value;
      let v = this.hasDuplicates ? this.navigationIndex || 0 : n.findIndex((u) => S(u, p, t));
      this.props.groupMode === "modern" && d && p && (v = (g = this.base.getGroupedDataModernMode(n, o)) == null ? void 0 : g.map((u) => u[d]).indexOf(p[d]));
      const y = !S(I, p, t);
      c && a ? this.base.scrollToVirtualItem(a, v) : c && !a ? (this.onPopupOpened(), n && n.length !== 0 && this.base.resetGroupStickyHeader(n[0][o], this), this.base.scrollToItem(v)) : (this.hasDuplicates || r && i && p && y) && this.base.scrollToItem(v);
    }
    c && this._input && this._input.focus(), this.setValidity();
  }
  /** @hidden */
  componentDidMount() {
    var s;
    this.observerResize = L && window.ResizeObserver && new window.ResizeObserver(this.calculateMedia.bind(this)), this.base.didMount(), this.setValidity(), (s = this.document) != null && s.body && this.observerResize && this.observerResize.observe(this.document.body), this.checkForDuplicatePlainTextRecords();
  }
  /** @hidden */
  componentWillUnmount() {
    var s;
    (s = this.document) != null && s.body && this.observerResize && this.observerResize.disconnect();
  }
  /** @hidden */
  render() {
    const s = G(this).toLanguageString(H, q[H]), e = G(this).toLanguageString(
      $,
      q[$]
    ), {
      dir: t,
      disabled: a,
      clearButton: o = D.defaultProps.clearButton,
      label: n,
      textField: d,
      adaptive: l,
      className: r,
      style: i,
      loading: c,
      iconClassName: p,
      virtual: g,
      size: I,
      rounded: v,
      fillMode: y,
      opened: u = this.state.opened,
      placeholder: m,
      svgIcon: b
    } = this.props, w = !this.validityStyles || this.validity.valid, T = this.props.filter !== void 0 ? this.props.filter : this.state.text, Y = C(this.value, d), O = k(T) ? T : Y, J = o && (!!O || k(this.value)), M = this.base.vs, _ = this.props.id || this._inputId, N = this.mobileMode;
    M.enabled = g !== void 0, g !== void 0 && (M.skip = g.skip, M.total = g.total, M.pageSize = g.pageSize);
    const [Q, X] = j(this.props.prefix || h.Fragment), [Z, ee] = j(this.props.suffix || h.Fragment), P = /* @__PURE__ */ h.createElement(h.Fragment, null, /* @__PURE__ */ h.createElement(
      "span",
      {
        className: E(
          "k-combobox k-input",
          {
            [`k-input-${F[I] || I}`]: I,
            [`k-rounded-${Ce[v] || v}`]: v,
            [`k-input-${y}`]: y,
            "k-invalid": !w,
            "k-loading": c,
            "k-required": this.required,
            "k-disabled": a
          },
          r
        ),
        ref: this.componentRef,
        style: n ? { ...i, width: void 0 } : i,
        dir: t
      },
      this.props.prefix && /* @__PURE__ */ h.createElement(Q, { ...X }),
      this.renderSearchBar(O || "", _, m),
      J && !c && /* @__PURE__ */ h.createElement(fe, { onClick: this.clearButtonClick, key: "clearbutton" }),
      c && /* @__PURE__ */ h.createElement(oe, { className: "k-input-loading-icon", name: "loading", key: "loading" }),
      this.props.suffix && /* @__PURE__ */ h.createElement(Z, { ...ee }),
      /* @__PURE__ */ h.createElement(
        z,
        {
          tabIndex: -1,
          type: "button",
          "aria-label": u ? e : s,
          icon: p ? void 0 : "caret-alt-down",
          svgIcon: b || be,
          iconClass: p,
          size: I,
          fillMode: y,
          rounded: null,
          themeColor: "base",
          className: "k-input-button",
          onClick: this.toggleBtnClick,
          onMouseDown: (te) => te.preventDefault()
        }
      ),
      !N && this.renderListContainer()
    ), N && this.renderAdaptiveListContainer());
    return n ? /* @__PURE__ */ h.createElement(
      de,
      {
        label: n,
        editorId: _,
        editorValue: O,
        editorValid: w,
        editorDisabled: a,
        style: { width: i ? i.width : void 0 },
        children: P
      }
    ) : P;
  }
  /** @hidden */
  onNavigate(s, e, t) {
    const { data: a = [], virtual: o = { skip: 0 } } = this.props, n = this.props.filter ? this.props.filter : this.state.text;
    let d = -1, l;
    const r = this.base.vs, i = this.value;
    this._suggested = "";
    const c = this.hasDuplicates && this.duplicates.indexOf(i) !== -1;
    if (d = this.getFocusedIndex(c), d !== -1 && !k(i))
      this.handleItemSelect(d, s);
    else if (n === "")
      this.handleItemSelect(0, s);
    else {
      const p = o.skip + d;
      l = this.base.navigation.navigate({
        keyCode: e,
        current: p,
        max: (r.enabled ? r.total : a.length) - 1,
        min: 0,
        skipItems: t || void 0
      }), l !== void 0 && this.handleItemSelect(l, s);
    }
    this.navigationIndex = l;
  }
  getCurrentValueDisabledStatus(s, e, t) {
    return s && e && e[t] && e[t].disabled;
  }
  applyValueOnEnter(s, e) {
    const { data: t = [], textField: a, allowCustom: o } = this.props, n = this.props.opened !== void 0 ? this.props.opened : this.state.opened, l = C(this.value, a) === s ? this.index : R(t, s, a), r = l !== -1;
    let i;
    if (this._suggested = "", r)
      i = t[l];
    else if (o)
      i = a !== void 0 ? { [a]: s } : s;
    else
      return this.selectFocusedItem(s, e);
    this.triggerOnChange(i, e), n && this.base.togglePopup(e), this.props.filter === void 0 && this.state.text !== void 0 && (e.data.text = void 0), this.applyState(e);
  }
  applyValueOnRejectSuggestions(s, e) {
    const { data: t = [], textField: a, allowCustom: o } = this.props, n = this.props.opened !== void 0 ? this.props.opened : this.state.opened, d = C(this.value, a);
    if (this._suggested = "", s === d || s === "" && !k(d))
      return this.closeOpenedApplyStateNonMobileMode(e, n), this.applyState(e);
    const l = R(t, s, a, !0), r = l !== -1;
    let i = null;
    r ? i = t[l] : o && (i = s ? a ? { [a]: s } : s : null), this.triggerOnChange(i, e), this.state.text !== void 0 && (e.data.text = void 0, this.base.filterChanged("", e)), this.closeOpenedApplyStateNonMobileMode(e, n), this.applyState(e);
  }
  selectFocusedItem(s, e) {
    const t = this.props.opened !== void 0 ? this.props.opened : this.state.opened, { data: a = [], textField: o, virtual: n = { skip: 0 }, focusedItemIndex: d = A } = this.props, l = n.skip, r = s === "" && l === 0 ? 0 : d(a, s, o);
    return r !== -1 ? this.handleItemSelect(r + l, e) : (this.triggerOnChange(null, e), this.state.text !== void 0 && (e.data.text = void 0)), t && this.base.togglePopup(e), this.applyState(e);
  }
  renderAdaptiveListContainer() {
    const { windowWidth: s = 0 } = this.state, { header: e, footer: t, size: a, data: o = [], groupField: n, groupMode: d, list: l, virtual: r, adaptiveTitle: i, groupStickyHeaderItemRender: c } = this.props, p = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
    let { group: g } = this.state;
    g === void 0 && n !== void 0 && (g = C(o[0], n));
    const I = {
      navigatable: !1,
      navigatableElements: [],
      expand: p,
      animation: !0,
      onClose: (v) => this.toggleBtnClick(v),
      animationStyles: s <= U ? { top: 0, width: "100%", height: "100%" } : void 0,
      className: s <= U ? "k-adaptive-actionsheet k-actionsheet-fullscreen" : "k-adaptive-actionsheet k-actionsheet-bottom"
    };
    return /* @__PURE__ */ h.createElement(Ie, { ...I }, /* @__PURE__ */ h.createElement(ye, { className: "k-text-center" }, /* @__PURE__ */ h.createElement("div", { className: "k-actionsheet-titlebar-group k-hbox" }, /* @__PURE__ */ h.createElement("div", { className: "k-actionsheet-title" }, /* @__PURE__ */ h.createElement("div", null, i)), /* @__PURE__ */ h.createElement("div", { className: "k-actionsheet-actions" }, /* @__PURE__ */ h.createElement(
      z,
      {
        tabIndex: 0,
        "aria-label": "Cancel",
        "aria-disabled": "false",
        type: "button",
        fillMode: "flat",
        onClick: this.toggleBtnClick,
        icon: "x",
        svgIcon: xe
      }
    ))), /* @__PURE__ */ h.createElement("div", { className: "k-actionsheet-titlebar-group k-actionsheet-filter" }, this.renderMobileListFilter())), /* @__PURE__ */ h.createElement(ke, { className: "!k-overflow-hidden" }, /* @__PURE__ */ h.createElement("div", { className: "k-list-container" }, /* @__PURE__ */ h.createElement("div", { className: E(
      {
        "k-list": !l,
        "k-list-lg": !0,
        "k-virtual-list": r,
        "k-data-table": l,
        [`k-table-${F[a] || a}`]: l && a
      }
    ) }, e && /* @__PURE__ */ h.createElement("div", { className: "k-table-header" }, e), !l && g && o.length !== 0 && /* @__PURE__ */ h.createElement(K, { group: g, groupMode: d, render: c }), this.renderList(), t && /* @__PURE__ */ h.createElement("div", { className: "k-list-footer" }, t)))));
  }
  renderListContainer() {
    const s = this.base, { dir: e, header: t, footer: a, data: o = [], groupField: n, groupMode: d, size: l, list: r, virtual: i, groupStickyHeaderItemRender: c } = this.props, p = this.props.opened !== void 0 ? this.props.opened : this.state.opened, g = s.getPopupSettings(), I = g.width !== void 0 ? g.width : s.popupWidth;
    let { group: v } = this.state;
    return v === void 0 && n !== void 0 && (v = C(o[0], n)), /* @__PURE__ */ h.createElement(
      ue,
      {
        width: I,
        popupSettings: {
          ...g,
          anchor: g.anchor || this.element,
          show: p,
          popupClass: E(
            g.popupClass,
            "k-list-container",
            "k-combobox-popup"
          )
        },
        dir: e !== void 0 ? e : this.base.dirCalculated,
        itemsCount: [o.length]
      },
      /* @__PURE__ */ h.createElement("div", { className: E(
        {
          "k-list": !r,
          [`k-list-${F[l] || l}`]: !r && l,
          "k-virtual-list": i,
          "k-data-table": r,
          [`k-table-${F[l] || l}`]: r && l
        }
      ) }, t && /* @__PURE__ */ h.createElement("div", { className: "k-table-header" }, t), !r && v && o.length !== 0 && /* @__PURE__ */ h.createElement(K, { group: v, groupMode: d, render: c }), this.renderList(), a && /* @__PURE__ */ h.createElement("div", { className: E(
        {
          "k-list-footer": !this.props.footerClassName
        },
        this.props.footerClassName
      ) }, a))
    );
  }
  renderList() {
    const s = this.base, {
      textField: e,
      dataItemKey: t,
      listNoDataRender: a,
      itemRender: o,
      groupHeaderItemRender: n,
      data: d = [],
      virtual: l = { skip: 0, total: void 0 }
    } = this.props, r = s.getPopupSettings(), i = s.vs, c = l.skip, p = this.props.opened !== void 0 ? this.props.opened : this.state.opened, g = `translateY(${i.translate}px)`, I = p ? this.getFocusedIndex(this.hasDuplicates) : void 0, v = this.props.filter !== void 0 ? this.props.filter : this.state.text, y = C(this.value, e), u = k(v) && v !== y ? null : this.value, m = this.props.list || ge;
    return /* @__PURE__ */ h.createElement(
      m,
      {
        id: s.listBoxId,
        virtual: !!l,
        show: p,
        data: d,
        focusedIndex: I,
        value: u,
        textField: e,
        valueField: t,
        groupField: this.props.groupField,
        groupMode: this.props.groupMode,
        isMultiColumn: this.props.isMultiColumn,
        optionsGuid: s.guid,
        hasDuplicates: this.hasDuplicates,
        listRef: (b) => {
          i.list = this.base.list = b, this.itemHeight = 0;
        },
        wrapperStyle: this.state.windowWidth && this.state.windowWidth > W ? { maxHeight: r.height } : {},
        wrapperCssClass: E(
          "k-list-content",
          {
            "k-list-scroller": !l
          }
        ),
        listStyle: i.enabled ? { transform: g } : void 0,
        key: "listkey",
        skip: c,
        onClick: this.handleItemClick,
        itemRender: o,
        groupHeaderItemRender: n,
        noDataRender: a,
        onMouseDown: (b) => b.preventDefault(),
        onScroll: this.onScroll,
        wrapperRef: i.scrollerRef,
        scroller: this.base.renderScrollElement(),
        ariaSetSize: l.total
      }
    );
  }
  renderSearchBar(s, e, t) {
    const {
      tabIndex: a,
      disabled: o,
      data: n = [],
      dataItemKey: d,
      virtual: l = { skip: 0 }
    } = this.props, r = this.props.opened !== void 0 ? this.props.opened : this.state.opened, i = this.value, c = Math.max(0, n.findIndex((p) => S(p, i, d)));
    return this._suggested && !S(this._valueOnDidUpdate, i, d) && (this._suggested = ""), /* @__PURE__ */ h.createElement(
      ce,
      {
        id: e,
        readOnly: r && this.mobileMode,
        placeholder: t,
        tabIndex: a,
        title: this.props.title,
        accessKey: this.props.accessKey,
        value: s + this._suggested,
        suggestedText: this._suggested,
        ref: (p) => this._input = p && p.input,
        onClick: this.onInputClick,
        onKeyDown: this.onInputKeyDown,
        onChange: this.inputOnChange,
        onFocus: this.base.handleFocus,
        onBlur: this.handleBlur,
        disabled: o,
        expanded: r,
        owns: this.base.listBoxId,
        activedescendant: `option-${this.base.guid}-${c + l.skip}`,
        role: "combobox",
        ariaLabelledBy: this.props.ariaLabelledBy,
        ariaDescribedBy: this.props.ariaDescribedBy,
        ariaRequired: this.required,
        render: this.props.valueRender
      }
    );
  }
  clearValue() {
    const s = this.base.initState();
    this._suggested = "", this.navigationIndex = void 0, this.base.filterChanged("", s), this.props.filter === void 0 && this.state.text !== void 0 && (s.data.text = void 0), this.triggerOnChange(null, s);
    const e = this.props.opened !== void 0 ? this.props.opened : this.state.opened, t = this.mobileMode;
    e && !t && this.base.togglePopup(s), this.applyState(s);
  }
  triggerOnChange(s, e) {
    const t = this.value;
    !this.hasDuplicates && (!k(t) && !k(s) || S(t, s, this.props.dataItemKey)) || (this.props.value === void 0 && (e.data.value = s), this._valueDuringOnChange = s, e.events.push({ type: "onChange" }));
  }
  getFocusedIndex(s) {
    const e = this.value, { data: t = [], textField: a, dataItemKey: o, virtual: n = { skip: 0 }, focusedItemIndex: d = A, skipDisabledItems: l } = this.props, r = this.props.filter ? this.props.filter : this.state.text;
    return s && this.navigationIndex !== void 0 ? this.navigationIndex : k(e) && r === void 0 ? t.findIndex((i) => S(i, e, o)) : r ? d(t, r, a) : l && a && !r && n.skip === 0 ? t.findIndex((i) => !i.disabled && i[a]) : n.skip === 0 ? 0 : -1;
  }
  suggestValue(s) {
    const { data: e, textField: t } = this.props;
    this._suggested = he(s, e, t);
  }
  applyState(s) {
    this.base.applyState(s), this._valueDuringOnChange = void 0;
  }
  calculateMedia(s) {
    for (const e of s)
      this.setState({ windowWidth: e.target.clientWidth });
  }
};
D.displayName = "ComboBox", D.propTypes = {
  ...V.propTypes,
  size: f.oneOf([null, "small", "medium", "large"]),
  rounded: f.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: f.oneOf([null, "solid", "flat", "outline"]),
  dataItemKey: f.string,
  groupField: f.string,
  groupMode: f.oneOf([void 0, "classic", "modern"]),
  isMultiColumn: f.bool,
  suggest: f.bool,
  placeholder: f.string,
  title: f.string,
  allowCustom: f.bool,
  clearButton: f.bool,
  iconClassName: f.string,
  svgIcon: ie,
  validationMessage: f.string,
  required: f.bool,
  id: f.string,
  ariaLabelledBy: f.string,
  ariaDescribedBy: f.string,
  list: f.any,
  valueRender: f.func,
  skipDisabledItems: f.bool
}, D.defaultProps = {
  ...V.defaultProps,
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  allowCustom: !1,
  clearButton: !0,
  required: !1,
  groupMode: "modern",
  isMultiColumn: !1,
  skipDisabledItems: !0,
  prefix: void 0,
  suffix: void 0
};
let B = D;
const De = ae(), Ee = ne(le(De, B));
Ee.displayName = "KendoReactComboBox";
export {
  Ee as ComboBox,
  De as ComboBoxPropsContext,
  B as ComboBoxWithoutContext
};
