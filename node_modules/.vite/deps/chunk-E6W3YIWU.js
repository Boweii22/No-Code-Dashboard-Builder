import {
  d as d2
} from "./chunk-P2CH6KAH.js";
import {
  cancelIcon,
  caretAltDownIcon,
  caretAltLeftIcon,
  caretAltRightIcon,
  insertBottomIcon,
  insertMiddleIcon,
  insertTopIcon,
  plusIcon
} from "./chunk-ILHBWX6Z.js";
import {
  A,
  E,
  O,
  P2 as P,
  R,
  W,
  a4 as a,
  c4 as c,
  d4 as d,
  e2 as e,
  e5 as e2,
  h2 as h,
  i4 as i,
  itemIdUtils_exports,
  j,
  l4 as l,
  m,
  m2,
  o,
  o9 as o2,
  require_prop_types,
  v2 as v,
  v3 as v2,
  w2 as w,
  y3 as y
} from "./chunk-IBO4PJA7.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@progress/kendo-react-treeview/TreeView.mjs
var o3 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-treeview/utils/getItemIdUponKeyboardNavigation.mjs
function F(o6, e7, t3, g, r2) {
  switch (g) {
    case e.left:
      return I2();
    case e.right:
      return l2();
    case e.up:
      return s4();
    case e.down:
      return y2();
    case e.home:
      return itemIdUtils_exports.ZERO_LEVEL_ZERO_NODE_ID;
    case e.end:
      return C4();
    default:
      return e7;
  }
  function I2() {
    return itemIdUtils_exports.isIdZeroLevel(e7) || r2.expanded(o6) && W(e7, t3, r2) ? e7 : itemIdUtils_exports.getDirectParentId(e7);
  }
  function l2() {
    return O(o6, r2) ? itemIdUtils_exports.getFirstChildId(e7) : e7;
  }
  function s4() {
    const d4 = Number(itemIdUtils_exports.getShortId(e7)), u2 = itemIdUtils_exports.getDirectParentId(e7);
    return d4 ? i2(itemIdUtils_exports.createId(d4 - 1, u2), t3, r2) : itemIdUtils_exports.isIdZeroLevel(e7) ? e7 : u2;
  }
  function y2() {
    return O(o6, r2) ? itemIdUtils_exports.getFirstChildId(e7) : p(e7, t3, r2) || e7;
  }
  function C4() {
    let d4 = (t3.length - 1).toString(), u2 = t3[t3.length - 1], h8;
    for (; O(u2, r2); )
      h8 = u2[r2.getChildrenField()], d4 = itemIdUtils_exports.createId(h8.length - 1, d4), u2 = h8[h8.length - 1];
    return d4;
  }
}
function p(o6, e7, t3) {
  const g = itemIdUtils_exports.getDirectParentId(o6), r2 = g ? itemIdUtils_exports.getItemById(g, e7, t3.getChildrenField()) : void 0, I2 = r2 ? r2[t3.getChildrenField()] : e7, l2 = Number(itemIdUtils_exports.getShortId(o6));
  return l2 < I2.length - 1 ? itemIdUtils_exports.createId(l2 + 1, g) : r2 ? p(g, e7, t3) : void 0;
}
function i2(o6, e7, t3) {
  const g = itemIdUtils_exports.getItemById(o6, e7, t3.getChildrenField());
  return O(g, t3) ? i2(itemIdUtils_exports.createId(g[t3.getChildrenField()].length - 1, o6), e7, t3) : o6;
}

// node_modules/@progress/kendo-react-treeview/TreeViewItem.mjs
var t2 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-treeview/utils/consts.mjs
var E2 = "expanded";
var e3 = "text";
var D = "disabled";
var I = "items";
var _ = "hasChildren";
var t = "selected";
var n = "checked";
var c2 = "checkIndeterminate";
var s = "_kendoItemId";
var L = "_kendoTreeViewGuid";

// node_modules/@progress/kendo-react-treeview/TreeViewItem.mjs
var { sizeMap: C } = e2;
var v3 = t2.createContext((n2) => n2);
var h2 = class h3 extends t2.Component {
  constructor() {
    super(...arguments), this.onCheckChange = (e7) => {
      this.props.onCheckChange(e7, this.item, this.itemId);
    }, this.onExpandChange = (e7) => {
      this.props.onExpandChange(e7, this.item, this.itemId);
    }, this.onItemClick = (e7) => {
      this.props.onItemClick(e7, this.item, this.itemId);
    }, this.onPress = (e7) => {
      this.props.onPress(e7.event, this.item, this.itemId);
    }, this.onDrag = (e7) => {
      this.props.onDrag(e7.event, this.item, this.itemId);
    }, this.onRelease = (e7) => {
      this.props.onRelease(e7.event, this.item, this.itemId);
    }, this.onContextMenu = (e7) => {
      this.props.onContextMenu(e7, this.item, this.itemId);
    }, this.assignDraggableMeta = (e7) => {
      e7 && (e7[s] = this.props.itemId, e7[L] = this.props.treeGuid);
    };
  }
  render() {
    const e7 = this.renderSubitemsIfApplicable(), i3 = this.renderItemInPart();
    return t2.createElement(
      "li",
      {
        className: o("k-treeview-item"),
        tabIndex: this.tabIndex,
        role: "treeitem",
        "aria-expanded": this.ariaExpanded,
        "aria-selected": this.ariaSelected,
        "aria-checked": this.ariaChecked,
        "aria-disabled": this.disabled ? true : void 0,
        ref: (s4) => this.itemElement = s4
      },
      t2.createElement("div", { className: `k-treeview-${this.props.position}`, ref: this.assignDraggableMeta }, this.renderExpandIcon(), this.renderCheckbox(), this.props.draggable ? t2.createElement(m2, { onPress: this.onPress, onDrag: this.onDrag, onRelease: this.onRelease }, i3) : i3),
      this.props.animate ? t2.createElement(
        d2,
        {
          transitionEnterDuration: 200,
          transitionExitDuration: 200,
          style: { display: "block" },
          children: e7
        }
      ) : e7
    );
  }
  componentDidMount() {
    const e7 = this.props.focusedItemId, i3 = this.itemId;
    e7 && e7 === i3 && this.props.onFocusDomElNeeded(this.itemElement), this.checkboxElement && (this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item));
  }
  componentDidUpdate(e7) {
    const i3 = this.props.focusedItemId;
    if (i3 && i3 !== e7.focusedItemId && i3 === this.itemId && this.props.onFocusDomElNeeded(this.itemElement), this.checkboxElement) {
      const s4 = this.fieldsSvc.checkIndeterminate(this.item);
      s4 !== e7.fieldsService.checkIndeterminate(e7.item) && (this.checkboxElement.indeterminate = s4);
    }
  }
  renderCheckbox() {
    if (this.props.checkboxes) {
      const e7 = this.props.size;
      return t2.createElement("div", { className: o("k-checkbox-wrap") }, t2.createElement(
        "input",
        {
          type: "checkbox",
          className: o(
            "k-checkbox k-rounded-md",
            {
              [`k-checkbox-${C[e7] || e7}`]: e7,
              "k-disabled": this.disabled
            }
          ),
          "aria-label": this.item.text,
          checked: !!this.fieldsSvc.checked(this.item),
          id: this.props.id,
          tabIndex: -1,
          onChange: this.onCheckChange,
          ref: (i3) => this.checkboxElement = i3
        }
      ), t2.createElement("label", { className: "k-checkbox-label", htmlFor: this.props.id }));
    } else
      return;
  }
  renderExpandIcon() {
    return this.props.expandIcons && // If it is explicitly said that the item has children (even not loaded yet)
    // or if the item actually has children, then render the icon.
    (this.fieldsSvc.hasChildren(this.item) || P(this.item, this.fieldsSvc.getChildrenField())) && // Allowing the toggle-button even with `disabled=true` might be a valid case!
    // Re-evaluate the classes bellow if such scenario occurs
    t2.createElement("span", { className: o("k-treeview-toggle", { "k-disabled": this.disabled }), onClick: this.onExpandChange }, t2.createElement(v, { ...this.getIconProps() }));
  }
  renderSubitemsIfApplicable() {
    const e7 = this.fieldsSvc.children(this.item);
    return O(this.item, this.fieldsSvc) ? t2.createElement("ul", { className: "k-treeview-group", role: "group" }, e7.map((i3, s4) => t2.createElement(
      d3,
      {
        item: i3,
        position: s4 === 0 ? "top" : s4 === e7.length - 1 ? "bot" : "mid",
        itemId: itemIdUtils_exports.createId(s4, this.itemId),
        treeGuid: this.props.treeGuid,
        animate: this.props.animate,
        focusedItemId: this.props.focusedItemId,
        tabbableItemId: this.props.tabbableItemId,
        fieldsService: this.props.fieldsService,
        itemUI: this.props.itemUI,
        checkboxes: this.props.checkboxes,
        ariaMultiSelectable: this.props.ariaMultiSelectable,
        onItemClick: this.props.onItemClick,
        onFocusDomElNeeded: this.props.onFocusDomElNeeded,
        draggable: this.props.draggable,
        onPress: this.props.onPress,
        onDrag: this.props.onDrag,
        onRelease: this.props.onRelease,
        expandIcons: this.props.expandIcons,
        onExpandChange: this.props.onExpandChange,
        onCheckChange: this.props.onCheckChange,
        onContextMenu: this.props.onContextMenu,
        key: s4,
        size: this.props.size,
        disabled: this.disabled,
        isRtl: this.props.isRtl
      }
    ))) : void 0;
  }
  renderItemInPart() {
    return t2.createElement(
      "span",
      {
        className: o(
          "k-treeview-leaf",
          {
            "k-focus": this.props.focusedItemId === this.itemId,
            "k-selected": this.fieldsSvc.selected(this.item),
            "k-disabled": this.disabled
          }
        ),
        style: { touchAction: "none" },
        onClick: this.onItemClick,
        onContextMenu: this.onContextMenu
      },
      t2.createElement("span", { className: "k-treeview-leaf-text" }, this.props.itemUI ? t2.createElement(this.props.itemUI, { item: this.item, itemHierarchicalIndex: this.itemId }) : this.fieldsSvc.text(this.item))
    );
  }
  get fieldsSvc() {
    return this.props.fieldsService;
  }
  get itemId() {
    return this.props.itemId;
  }
  get item() {
    return this.props.item;
  }
  get tabIndex() {
    return (this.props.focusedItemId || this.props.tabbableItemId) === this.itemId ? 0 : -1;
  }
  get ariaExpanded() {
    return this.fieldsSvc.hasChildren(this.item) || P(this.item, this.fieldsSvc.getChildrenField()) ? !!this.fieldsSvc.expanded(this.item) : void 0;
  }
  get disabled() {
    return this.props.disabled || this.fieldsSvc.disabled(this.item);
  }
  get ariaChecked() {
    if (this.props.checkboxes)
      return this.fieldsSvc.checked(this.item) ? "true" : this.fieldsSvc.checkIndeterminate(this.item) ? "mixed" : "false";
  }
  get ariaSelected() {
    return this.fieldsSvc.selected(this.item) ? true : this.props.ariaMultiSelectable ? this.disabled ? void 0 : false : void 0;
  }
  getIconProps() {
    const e7 = this.fieldsSvc.expanded(this.item);
    return e7 && !P(this.item, this.fieldsSvc.getChildrenField()) ? { name: "loading" } : e7 ? { name: "caret-alt-down", icon: caretAltDownIcon } : { name: this.props.isRtl ? "caret-alt-left" : "caret-alt-right", icon: this.props.isRtl ? caretAltLeftIcon : caretAltRightIcon };
  }
};
h2.defaultProps = {
  position: "top"
};
var a2 = h2;
var d3 = m(t2.forwardRef((n2, e7) => {
  const s4 = t2.useContext(v3).call(void 0, n2);
  return t2.createElement(
    a2,
    {
      ref: e7,
      ...s4
    }
  );
}));
d3.displayName = "TreeViewItem";

// node_modules/@progress/kendo-react-treeview/package-metadata.mjs
var e4 = {
  name: "@progress/kendo-react-treeview",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1712846602,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/components/my-license/"
};

// node_modules/@progress/kendo-react-treeview/TreeView.mjs
var { sizeMap: P2 } = e2;
var h4 = class h5 extends o3.Component {
  constructor(t3) {
    super(t3), this.state = { focusedItemId: void 0, focusedItemPublicId: void 0, tabbableItemId: itemIdUtils_exports.ZERO_LEVEL_ZERO_NODE_ID }, this.fieldsSvc = null, this.allowExplicitFocus = false, this._element = null, this.onFocusDomElNeeded = (e7) => {
      this.allowExplicitFocus && this.focusDomItem(e7);
    }, this.onCheckChange = (e7, i3, s4) => {
      this.setFocus(s4), this.dispatchCheckChange(e7, i3, s4);
    }, this.onExpandChange = (e7, i3, s4) => {
      this.setFocus(s4), this.dispatchExpandChange(e7, i3, s4);
    }, this.onPress = (e7, i3, s4) => {
      this.props.onItemDragStart && this.props.onItemDragStart.call(
        void 0,
        { target: this, item: i3, itemHierarchicalIndex: s4 }
      );
    }, this.onDrag = (e7, i3, s4) => {
      const { pageX: l2, pageY: r2, clientX: n2, clientY: c3 } = e7;
      this.props.onItemDragOver && this.props.onItemDragOver.call(
        void 0,
        {
          target: this,
          item: i3,
          itemHierarchicalIndex: s4,
          pageX: l2,
          pageY: r2,
          clientX: n2,
          clientY: c3
        }
      );
    }, this.onRelease = (e7, i3, s4) => {
      const { pageX: l2, pageY: r2, clientX: n2, clientY: c3 } = e7;
      this.props.onItemDragEnd && this.props.onItemDragEnd.call(
        void 0,
        {
          target: this,
          item: i3,
          itemHierarchicalIndex: s4,
          pageX: l2,
          pageY: r2,
          clientX: n2,
          clientY: c3
        }
      );
    }, this.onItemClick = (e7, i3, s4) => {
      this.setFocus(s4), this.dispatchItemClick(e7, i3, s4);
    }, this.onFocus = () => {
      clearTimeout(this.blurRequest), this.state.focusedItemId === void 0 && this.data.length && this.setFocus(this.state.tabbableItemId);
    }, this.onBlur = () => {
      clearTimeout(this.blurRequest), this.blurRequest = window.setTimeout(() => this.setFocus(void 0), 0);
    }, this.onKeyDown = (e7) => {
      const i3 = this.getFocusedItem();
      if (i3 && this.fieldsSvc) {
        const s4 = F(i3, this.state.focusedItemId, this.data, e7.keyCode, this.fieldsSvc);
        s4 !== this.state.focusedItemId && (e7.preventDefault(), this.allowExplicitFocus = true, this.setFocus(s4)), this.dispatchEventsOnKeyDown(e7, i3);
      }
    }, this.onContextMenu = (e7, i3, s4) => {
      if (this.props.onContextMenu) {
        const l2 = {
          target: this,
          syntheticEvent: e7,
          nativeEvent: e7.nativeEvent,
          item: i3,
          itemID: s4
        };
        this.props.onContextMenu.call(void 0, l2);
      }
    }, l(e4);
  }
  get treeGuid() {
    return this.props.id + "-accessibility-id";
  }
  /**
   * @hidden
   */
  get element() {
    return this._element;
  }
  /**
   * @hidden
   */
  render() {
    this.fieldsSvc = new h(this.props);
    const { size: t3, className: e7 } = this.props;
    return o3.createElement(
      "div",
      {
        id: this.props.id,
        style: this.props.style ? this.props.style : void 0,
        className: o(
          "k-treeview",
          {
            [`k-treeview-${P2[t3] || t3}`]: t3,
            "k-user-select-none": this.props.draggable,
            "k-rtl": this.props.dir === "rtl"
          },
          e7
        ),
        onKeyDown: this.onKeyDown,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        role: "tree",
        "aria-multiselectable": this.ariaMultiSelectable ? true : void 0,
        "aria-label": this.props["aria-label"],
        "aria-labelledby": this.props["aria-labelledby"],
        ref: (i3) => this._element = i3,
        tabIndex: this.props.tabIndex
      },
      o3.createElement("ul", { className: "k-treeview-lines k-treeview-group", role: "group" }, this.data.map((i3, s4) => o3.createElement(
        d3,
        {
          id: this.props.id + "-item-" + s4,
          item: i3,
          position: s4 === 0 ? "top" : s4 === this.data.length - 1 ? "bot" : "mid",
          itemId: s4.toString(),
          treeGuid: this.treeGuid,
          animate: this.props.animate,
          focusedItemId: this.state.focusedItemId,
          tabbableItemId: this.state.tabbableItemId,
          fieldsService: this.fieldsSvc,
          itemUI: this.props.item,
          checkboxes: this.props.checkboxes,
          ariaMultiSelectable: this.ariaMultiSelectable,
          onItemClick: this.onItemClick,
          onFocusDomElNeeded: this.onFocusDomElNeeded,
          draggable: this.props.draggable,
          onPress: this.onPress,
          onDrag: this.onDrag,
          onRelease: this.onRelease,
          expandIcons: this.props.expandIcons,
          onExpandChange: this.onExpandChange,
          onCheckChange: this.onCheckChange,
          onContextMenu: this.onContextMenu,
          key: s4,
          size: t3,
          isRtl: this.props.dir === "rtl"
        }
      )))
    );
  }
  /**
   * @hidden
   */
  componentDidUpdate() {
    this.allowExplicitFocus = false, this.refocusDueToFocusIdField();
  }
  dispatchEventsOnKeyDown(t3, e7) {
    if (this.fieldsSvc === null)
      return;
    const i3 = () => this.fieldsSvc && W(this.state.focusedItemId, this.data, this.fieldsSvc);
    t3.keyCode === e.left && this.fieldsSvc.expanded(e7) && i3() ? this.dispatchExpandChange(t3, e7, this.state.focusedItemId) : t3.keyCode === e.right && !this.fieldsSvc.expanded(e7) && (this.fieldsSvc.hasChildren(e7) || P(e7, this.props.childrenField)) && i3() ? this.dispatchExpandChange(t3, e7, this.state.focusedItemId) : t3.keyCode === e.enter && i3() ? this.dispatchItemClick(t3, e7, this.state.focusedItemId) : t3.keyCode === e.space && i3() && (t3.preventDefault(), this.dispatchCheckChange(t3, e7, this.state.focusedItemId));
  }
  setFocus(t3) {
    if (t3 && this.fieldsSvc)
      if (this.fieldsSvc.focusIdField) {
        const e7 = this.getItemById(t3);
        this.setState({ focusedItemId: t3, focusedItemPublicId: this.fieldsSvc.focusId(e7) });
      } else
        this.setState({ focusedItemId: t3 });
    else
      this.setState((e7) => ({
        focusedItemId: void 0,
        focusedItemPublicId: void 0,
        tabbableItemId: e7.focusedItemId
      }));
  }
  getFocusedItem() {
    return this.state.focusedItemId ? this.getItemById(this.state.focusedItemId) : void 0;
  }
  getItemById(t3) {
    return itemIdUtils_exports.getItemById(t3, this.data, this.props.childrenField || I);
  }
  dispatchCheckChange(t3, e7, i3) {
    c(this.props.onCheckChange, t3, this, { item: e7, itemHierarchicalIndex: i3 });
  }
  dispatchExpandChange(t3, e7, i3) {
    c(this.props.onExpandChange, t3, this, { item: e7, itemHierarchicalIndex: i3 });
  }
  dispatchItemClick(t3, e7, i3) {
    c(this.props.onItemClick, t3, this, { item: e7, itemHierarchicalIndex: i3 });
  }
  refocusDueToFocusIdField() {
    if (this.fieldsSvc && this.fieldsSvc.focusIdField) {
      const t3 = this.state.focusedItemPublicId;
      if (t3) {
        const e7 = this.props.getFocusHierarchicalIndex ? this.props.getFocusHierarchicalIndex(t3) : R(t3, this.fieldsSvc.focusIdField, this.data, this.props.childrenField);
        e7 !== this.state.focusedItemId && (this.allowExplicitFocus = true, this.setState({ focusedItemId: e7 }));
      }
    }
  }
  get ariaMultiSelectable() {
    return this.props["aria-multiselectable"] === true || this.props["aria-multiselectable"] === "true";
  }
  get data() {
    return this.props.data || [];
  }
  focusDomItem(t3) {
    t3.focus();
  }
  /**
   * Returns the `guid` which is associated with the TreeView.
   */
  get guid() {
    return this.treeGuid;
  }
};
h4.propTypes = {
  data: import_prop_types.default.arrayOf(import_prop_types.default.any),
  animate: import_prop_types.default.bool,
  tabIndex: import_prop_types.default.number,
  focusIdField: import_prop_types.default.string,
  getHierarchicalIndexById: import_prop_types.default.func,
  onExpandChange: import_prop_types.default.func,
  onItemClick: import_prop_types.default.func,
  expandField: import_prop_types.default.string,
  selectField: import_prop_types.default.string,
  childrenField: import_prop_types.default.string,
  hasChildrenField: import_prop_types.default.string,
  textField: import_prop_types.default.string,
  disableField: import_prop_types.default.string,
  item: import_prop_types.default.any,
  "aria-multiselectable": (t3, e7, i3) => t3[e7] !== void 0 && t3[e7] !== true && t3[e7] !== false && t3[e7] !== "true" && t3[e7] !== "false" ? new Error(
    "Invalid prop `" + e7 + "` supplied to `" + i3 + "`. Validation failed."
  ) : null,
  "aria-label": import_prop_types.default.string,
  "aria-labelledby": import_prop_types.default.string,
  size: import_prop_types.default.oneOf([null, "small", "medium", "large"]),
  dir: import_prop_types.default.string
}, h4.defaultProps = {
  animate: true,
  expandField: E2,
  selectField: t,
  hasChildrenField: _,
  childrenField: I,
  textField: e3,
  disableField: D,
  checkField: n,
  checkIndeterminateField: c2,
  size: "medium"
};
var m3 = h4;

// node_modules/@progress/kendo-react-treeview/processTreeViewItems.mjs
function A2(n2, t3) {
  if (!n2 || !n2.length)
    return [];
  let e7 = n2;
  const l2 = t3.cloneField || "cloned", f = t3.expandField || E2, s4 = t3.selectField || t, c3 = t3.checkField || n, i3 = t3.childrenField || I;
  return e7 = r(e7, f, t3.expand, l2, i3), e7 = r(e7, s4, t3.select, l2, i3), e7 = r(e7, c3, t3.check, l2, i3), p2(e7, i3, t3.check), e7;
}
function r(n2, t3, e7, l2, f) {
  if (e7) {
    let { ids: s4, field: c3 } = F2(e7, t3), i3 = !a(e7) && e7.idField ? A(s4, e7.idField, n2, f) : s4;
    return h6(n2, i3, c3, l2, f);
  } else
    return n2;
}
function F2(n2, t3) {
  let e7, l2;
  return a(n2) ? (e7 = n2, l2 = t3) : (e7 = n2.ids || [], l2 = n2.operationField || t3), { ids: e7, field: l2 };
}
function h6(n2, t3, e7, l2, f) {
  let s4 = n2;
  return t3.forEach((c3) => {
    s4 = d(s4, c3, (i3) => o4(e7, i3), l2, f);
  }), s4;
}
function o4(n2, t3) {
  const e7 = (n2 || "").split(".");
  let l2 = t3;
  for (let f = 0; f < e7.length; f++) {
    const s4 = e7[f];
    if (f === e7.length - 1)
      l2[s4] = true;
    else if (l2[s4] !== void 0)
      l2[s4] = { ...l2[s4] }, l2 = l2[s4];
    else
      return;
  }
}
function p2(n2, t3, e7) {
  if (e7 && !a(e7) && e7.applyCheckIndeterminate) {
    const { field: l2 } = F2(e7, n), f = e7.checkIndeterminateField || c2;
    for (let s4 = 0; s4 < n2.length; s4++) {
      const c3 = n2[s4], i3 = c3[t3];
      i3 && u(
        i3,
        o2(l2, c3) ? [] : [c3],
        t3,
        l2,
        f
      );
    }
  }
}
function u(n2, t3, e7, l2, f) {
  let s4 = false;
  for (let c3 = 0; c3 < n2.length; c3++) {
    const i3 = n2[c3];
    if (o2(l2, i3)) {
      if (!s4)
        for (let d4 = 0; d4 < t3.length; d4++)
          o4(f, t3[d4]);
      s4 = true, i3[e7] && u(i3[e7], [], e7, l2, f);
    } else
      i3[e7] && u(
        i3[e7],
        s4 ? [i3] : t3.concat([i3]),
        e7,
        l2,
        f
      );
  }
}

// node_modules/@progress/kendo-react-treeview/moveTreeViewItem.mjs
function C2(u2, f, l2, t3, n2, r2) {
  const e7 = r2 || I;
  if (!_2())
    return m4();
  const d4 = itemIdUtils_exports.getItemById(u2, f, e7);
  if (!d4)
    return m4();
  if (!n2 || n2 === f) {
    if (!F3())
      return m4();
    const o6 = v2(u2, e7, f), p3 = E(
      d4,
      l2,
      e7,
      itemIdUtils_exports.getDecrementedItemIdAfterRemoval(u2, t3),
      o6
    );
    return n2 ? { sourceData: p3, targetData: p3 } : p3;
  } else {
    const o6 = v2(u2, e7, f), p3 = E(d4, l2, e7, t3, n2);
    return { sourceData: o6, targetData: p3 };
  }
  function m4() {
    return n2 ? { sourceData: f, targetData: n2 } : f;
  }
  function F3() {
    return !`${t3}_`.startsWith(`${u2}_`);
  }
  function _2() {
    if (!f || !f.length || !u2 || !t3 || n2 && !n2.length)
      return false;
    const o6 = !n2 || n2 === f ? f : n2;
    return !!itemIdUtils_exports.getItemById(t3, o6, e7);
  }
}

// node_modules/@progress/kendo-react-treeview/handleTreeViewCheckChange.mjs
function b(i3, n2, t3, s4 = {}, d4) {
  if (!t3 || !t3.length)
    return [];
  const { ids: r2, idField: l2 } = k(n2), c3 = l2 ? o2(l2, i3.item) : i3.itemHierarchicalIndex, h8 = r2.indexOf(c3), o6 = h8 === -1, a5 = d4 || I;
  let e7;
  return s4.singleMode ? e7 = o6 ? [c3] : [] : (e7 = r2.slice(), o6 ? e7.push(c3) : e7.splice(h8, 1), s4.checkChildren && C3(i3.item, i3.itemHierarchicalIndex, o6, l2, a5, e7), s4.checkParents && D2(i3.itemHierarchicalIndex, o6, l2, a5, e7, t3)), a(n2) ? e7 : Object.assign({}, n2, { ids: e7 });
}
function k(i3) {
  let n2, t3;
  return a(i3) ? n2 = i3 : (n2 = i3.ids || [], t3 = i3.idField), { ids: n2, idField: t3 };
}
function C3(i3, n2, t3, s4, d4, r2) {
  j(i3, n2, d4, s4).forEach((l2) => {
    t3 && r2.indexOf(l2) === -1 ? r2.push(l2) : !t3 && r2.indexOf(l2) > -1 && r2.splice(r2.indexOf(l2), 1);
  });
}
function D2(i3, n2, t3, s4, d4, r2) {
  const l2 = a5();
  let c3 = l2.next();
  n2 ? h8() : o6();
  function h8() {
    for (; !c3.done; ) {
      const { id: e7, item: f } = c3.value;
      if (d4.indexOf(e7) === -1 && w(f, e7, t3, s4, d4))
        d4.push(e7), c3 = l2.next();
      else
        break;
    }
  }
  function o6() {
    for (; !c3.done; ) {
      const { id: e7 } = c3.value, f = d4.indexOf(e7);
      if (f > -1)
        d4.splice(f, 1), c3 = l2.next();
      else
        break;
    }
  }
  function* a5() {
    if (t3) {
      const e7 = y(i3, s4, r2);
      for (let f = e7.length - 1; f > -1; f--)
        yield { id: o2(t3, e7[f]), item: n2 ? e7[f] : void 0 };
    } else {
      let e7 = itemIdUtils_exports.getDirectParentId(i3);
      for (; e7; )
        yield { id: e7, item: n2 ? itemIdUtils_exports.getItemById(e7, r2, s4) : void 0 }, e7 = itemIdUtils_exports.getDirectParentId(e7);
    }
  }
}

// node_modules/@progress/kendo-react-treeview/TreeViewDragClue.mjs
var s2 = __toESM(require_react(), 1);
var e5 = class e6 extends s2.PureComponent {
  constructor() {
    super(...arguments), this.state = {
      visible: false,
      top: 0,
      left: 0,
      text: "",
      operationClassName: "cancel"
    };
  }
  /**
   * @hidden
   */
  render() {
    const t3 = { top: this.state.top + "px", left: this.state.left + "px" };
    return this.state.visible && s2.createElement("div", { className: "k-header k-drag-clue", style: { ...this.props.style, ...t3 } }, s2.createElement(
      v,
      {
        className: o("k-drag-status"),
        name: this.state.operationClassName && i(this.state.operationClassName),
        icon: this.state.operationClassName === "k-i-plus" ? plusIcon : this.state.operationClassName === "k-i-insert-up" ? insertTopIcon : this.state.operationClassName === "k-i-insert-down" ? insertBottomIcon : this.state.operationClassName === "k-i-insert-middle" ? insertMiddleIcon : cancelIcon
      }
    ), this.state.text);
  }
  /**
   * Displays the TreeViewDragClue component.
   *
   * @param top - The `top` CSS position of the component.
   * @param left - The `left` CSS position of the component.
   * @param text - The text of the component.
   * @param operationClassName - The CSS class name which is related to the specific drop operation.
   */
  show(t3, i3, o6, n2) {
    this.setState({ visible: true, top: t3, left: i3, text: o6, operationClassName: n2 });
  }
  /**
   * Hides the TreeViewDragClue component.
   */
  hide() {
    this.setState({ visible: false });
  }
};
e5.defaultProps = { style: { display: "block", position: "absolute", zIndex: 2e4, padding: "4px 6px" } };
var a4 = e5;

// node_modules/@progress/kendo-react-treeview/TreeViewDragAnalyzer.mjs
var s3 = 6;
var h7 = class {
  /**
   * @param event - The event that will be analyzed.
   */
  constructor(t3) {
    this.event = t3, this.initialized = false, this.destItemId = "", this.destTreeViewGuid = "", this.itemId = t3.itemHierarchicalIndex, this.treeViewGuid = t3.target.guid;
  }
  /**
   * The method which initializes the analyzer.
   * Invoke the method before you call any other methods.
   *
   * @returns - The analyzer object of the `drag` event.
   */
  init() {
    return this.initialized || (this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY)), this.initialized = true), this;
  }
  /**
   * Returns `true` if dropping is allowed. Otherwise, returns `false`.
   */
  get isDropAllowed() {
    return this.initialized && this.destItemId && this.destTreeViewGuid ? !`${this.destTreeViewGuid}_${this.destItemId}_`.startsWith(`${this.treeViewGuid}_${this.itemId}_`) : false;
  }
  /**
   * Returns an object which contains:
   * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and
   * * The `guid` of the destination TreeView (the TreeView which renders the destination item).
   */
  get destinationMeta() {
    return { itemHierarchicalIndex: this.destItemId, treeViewGuid: this.destTreeViewGuid };
  }
  /**
   * Returns the specific drop operation.
   *
   * @returns - The following values are returned:
   * * `before`&mdash;Indicates that the dragged item is positioned at the beginning of the destination item.
   * * `after`&mdash;Indicates that the dragged item is positioned at the end of the destination item.
   * * `child`&mdash;Indicates that the dragged item is positioned in the middle of the destination item.
   * * `undefined`&mdash;Indicates that dropping is not allowed.
   */
  getDropOperation() {
    if (this.initialized && this.isDropAllowed) {
      const { top: t3, height: e7 } = this.destDomNodeWithMeta.getBoundingClientRect();
      return t3 + e7 - this.event.clientY < s3 ? "after" : this.event.clientY - t3 < s3 ? "before" : "child";
    } else
      return;
  }
  setDestimationMeta(t3) {
    let e7 = t3;
    for (; e7 && !e7[s]; )
      e7 = e7.parentNode;
    e7 && e7[s] && (this.destDomNodeWithMeta = e7, this.destItemId = e7[s], this.destTreeViewGuid = e7[L]);
  }
};

// node_modules/@progress/kendo-react-treeview/index.mjs
var o5 = m(m3);
o5.displayName = "KendoReactTreeView";

export {
  F,
  v3 as v,
  m3 as m,
  A2 as A,
  C2 as C,
  b,
  a4 as a,
  h7 as h,
  o5 as o
};
/*! Bundled license information:

@progress/kendo-react-treeview/utils/getItemIdUponKeyboardNavigation.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/utils/consts.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/TreeViewItem.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/package-metadata.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/TreeView.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/processTreeViewItems.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/moveTreeViewItem.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/handleTreeViewCheckChange.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/TreeViewDragClue.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/TreeViewDragAnalyzer.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-treeview/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)
*/
//# sourceMappingURL=chunk-E6W3YIWU.js.map
