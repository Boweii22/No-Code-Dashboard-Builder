"use client";
import {
  k
} from "./chunk-ZIARFZFI.js";
import "./chunk-P2CH6KAH.js";
import {
  a2 as a,
  c,
  s,
  v as v2
} from "./chunk-JRA7E26J.js";
import {
  v as v3
} from "./chunk-FVVK3HUS.js";
import {
  arrowRotateCwSmallIcon,
  cancelIcon,
  checkIcon,
  copyIcon,
  exclamationCircleIcon,
  fileAudioIcon,
  fileConfigIcon,
  fileDataIcon,
  fileIcon,
  fileImageIcon,
  filePdfIcon,
  filePresentationIcon,
  fileProgrammingIcon,
  fileTxtIcon,
  fileVideoIcon,
  fileWordIcon,
  fileZipIcon,
  uploadIcon,
  xIcon
} from "./chunk-ILHBWX6Z.js";
import {
  e,
  e2,
  i2 as i,
  l4 as l,
  o,
  o4 as o2,
  o8 as o3,
  require_prop_types,
  v2 as v
} from "./chunk-IBO4PJA7.js";
import "./chunk-2ZFG6UXX.js";
import "./chunk-PJEEZAML.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __export,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@progress/kendo-react-upload/UploadUI.mjs
var s4 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-upload/UploadList.mjs
var s3 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-upload/UploadListGroup.mjs
var n3 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-upload/interfaces/UploadFileStatus.mjs
var n = ((e8) => (e8[e8.UploadFailed = 0] = "UploadFailed", e8[e8.Initial = 1] = "Initial", e8[e8.Selected = 2] = "Selected", e8[e8.Uploading = 3] = "Uploading", e8[e8.Uploaded = 4] = "Uploaded", e8[e8.RemoveFailed = 5] = "RemoveFailed", e8[e8.Removing = 6] = "Removing", e8))(n || {});

// node_modules/@progress/kendo-react-upload/UploadListSingleItem.mjs
var a3 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-upload/messages/index.mjs
var e3 = "upload.cancel";
var l2 = "upload.clearSelectedFiles";
var o4 = "upload.dropFilesHere";
var t = "upload.headerStatusUploaded";
var a2 = "upload.headerStatusUploading";
var s2 = "upload.invalidFileExtension";
var d = "upload.invalidFiles";
var i2 = "upload.invalidMaxFileSize";
var n2 = "upload.invalidMinFileSize";
var p = "upload.remove";
var c2 = "upload.retry";
var u = "upload.select";
var r = "upload.selectTitle";
var F = "upload.selectNoFilesTitle";
var f = "upload.uploadSelectedFiles";
var S = "upload.total";
var v4 = "upload.files";
var U = "upload.statusUploaded";
var h = "upload.statusUploadFailed";
var m = "upload.dropZoneHint";
var N = "upload.defaultDropZoneNote";
var g = "upload.dropZoneNote";
var y = {
  [e3]: "Cancel",
  [l2]: "Clear",
  [o4]: "Drop files here to upload",
  [t]: "Done",
  [a2]: "Uploading...",
  [s2]: "File type not allowed.",
  [d]: "Invalid file(s). Please check file upload requirements.",
  [i2]: "File size too large.",
  [n2]: "File size too small.",
  [p]: "Remove",
  [c2]: "Retry",
  [u]: "Select files...",
  [r]: "Press to select more files",
  [F]: "No files selected",
  [f]: "Upload",
  [S]: "Total",
  [v4]: "files",
  [U]: "File(s) successfully uploaded.",
  [h]: "File(s) failed to upload.",
  [m]: "Drag and drop files here to upload.",
  [N]: "",
  [g]: "Only {0} files are allowed."
};

// node_modules/@progress/kendo-react-upload/utils/utils.mjs
var f2 = /&/g;
var m2 = /</g;
var E = /"/g;
var x = /'/g;
var h2 = />/g;
var d2 = (e8) => ("" + e8).replace(f2, "&amp;").replace(m2, "&lt;").replace(h2, "&gt;").replace(E, "&quot;").replace(x, "&#39;");
var p2 = (e8) => {
  const t3 = /\.([^\.]+)$/, s7 = e8.match(t3);
  return s7 ? s7[0] : "";
};
var g2 = (e8) => {
  const t3 = e8.name, s7 = e8.size;
  return {
    extension: p2(t3),
    name: d2(t3),
    getRawFile: () => e8,
    size: s7,
    status: n.Selected,
    progress: 0,
    uid: ""
  };
};
var F2 = (e8) => {
  let t3 = new Array(), s7;
  for (s7 = 0; s7 < e8.length; s7++)
    t3.push(g2(e8[s7]));
  return t3;
};
var i3 = (e8) => !!(e8.validationErrors && e8.validationErrors.length > 0);
var z = (e8) => {
  for (let t3 of e8)
    if (i3(t3))
      return true;
  return false;
};
var U2 = (e8) => {
  let t3 = 0, s7;
  if (typeof e8[0].size == "number")
    for (s7 = 0; s7 < e8.length; s7++)
      e8[s7].size && (t3 += e8[s7].size || 0);
  else
    return "";
  return t3 /= 1024, t3 < 1024 ? t3.toFixed(2) + " KB" : (t3 / 1024).toFixed(2) + " MB";
};
var S2 = (e8, t3) => {
  const s7 = i();
  return e8.map((o5) => (o5.uid = t3 ? s7 : i(), o5));
};
var R = (e8) => {
  let t3 = false, s7 = false, o5 = false, l6 = false;
  const u5 = (n8) => {
    n8.forEach((r6) => {
      r6.status === n.Uploading && (t3 = true), r6.status === n.Uploaded && (s7 = true), r6.status === n.UploadFailed && (o5 = true), i3(r6) && (l6 = true);
    });
  };
  return Array.isArray(e8) ? u5(e8) : Object.keys(e8).forEach((n8) => {
    u5(e8[n8]);
  }), [t3, s7, o5, l6];
};
var v5 = {
  fileHasValidationErrors: i3,
  filesHaveValidationErrors: z,
  getTotalFilesSizeMessage: U2,
  getAllFileInfo: F2,
  getFileInfo: g2,
  getFileExtension: p2,
  htmlEncode: d2,
  assignGuidToFiles: S2,
  getFileStatus: R
};

// node_modules/@progress/kendo-react-upload/UploadListActionButton.mjs
var r2 = __toESM(require_react(), 1);
var F3 = class extends r2.Component {
  constructor(t3) {
    super(t3), this.buttonClassNames = (o5) => {
      const { actionFocused: s7, retryFocused: i7 } = this.state;
      return o(
        "k-icon-button k-upload-action",
        this.props.disabled ? "k-disabled" : "",
        s7 && o5 === "action" || i7 && o5 === "retry" ? "k-focus" : ""
      );
    }, this.onRetryFocus = () => {
      this.setState({
        retryFocused: true
      });
    }, this.onRetryBlur = () => {
      this.setState({
        retryFocused: false
      });
    }, this.onActionFocus = () => {
      this.setState({
        actionFocused: true
      });
    }, this.onActionBlur = () => {
      this.setState({
        actionFocused: false
      });
    }, this.onActionClick = () => {
      const { status: o5, uid: s7, disabled: i7, onCancel: a6, onRemove: n8 } = this.props;
      i7 || o5 === n.Removing || (o5 === n.Uploading ? a6.call(void 0, s7) : n8.call(void 0, s7));
    }, this.onRetryClick = () => {
      const { uid: o5, disabled: s7, onRetry: i7 } = this.props;
      s7 || i7.call(void 0, o5);
    }, this.state = {
      retryFocused: false,
      actionFocused: false
    };
  }
  actionButtonTitle(t3, o5) {
    return t3 === n.Uploading ? o5.toLanguageString(e3, y[e3]) : o5.toLanguageString(p, y[p]);
  }
  retryButtonTitle(t3) {
    return t3.toLanguageString(c2, y[c2]);
  }
  render() {
    const { status: t3, progress: o5 } = this.props, s7 = t3 === n.UploadFailed, i7 = t3 === n.Uploading, a6 = (t3 === n.Uploaded || t3 === n.Initial) && !this.props.async.removeUrl, n8 = s(this);
    return r2.createElement("span", { className: "k-upload-actions" }, i7 ? r2.createElement("span", { className: "k-upload-pct" }, o5, "%") : void 0, s7 ? r2.createElement(
      v3,
      {
        type: "button",
        themeColor: "base",
        fillMode: "flat",
        tabIndex: -1,
        className: this.buttonClassNames("retry"),
        onFocus: this.onRetryFocus,
        onBlur: this.onRetryBlur,
        onClick: this.onRetryClick,
        "aria-label": this.retryButtonTitle(n8),
        title: this.retryButtonTitle(n8),
        icon: "arrow-rotate-cw-small",
        svgIcon: arrowRotateCwSmallIcon
      }
    ) : void 0, a6 ? void 0 : r2.createElement(
      v3,
      {
        type: "button",
        themeColor: "base",
        fillMode: "flat",
        tabIndex: -1,
        className: this.buttonClassNames("action"),
        onFocus: this.onActionFocus,
        onBlur: this.onActionBlur,
        onClick: this.onActionClick,
        "aria-label": this.actionButtonTitle(t3, n8),
        title: this.actionButtonTitle(t3, n8),
        icon: t3 === n.Uploading ? "cancel" : "x",
        svgIcon: t3 === n.Uploading ? cancelIcon : xIcon
      }
    ));
  }
};
v2(F3);

// node_modules/@progress/kendo-react-upload/UploadListSingleItem.mjs
var M = class extends a3.Component {
  /**
   * @hidden
   */
  getFileExtension(e8) {
    return e8.extension ? e8.extension.substring(1) : "";
  }
  /**
   * @hidden
   */
  getFileValidationMessage(e8, i7) {
    const s7 = s(this);
    let n8 = "";
    if (i7)
      n8 = s7.toLanguageString(h, y[h]);
    else if (e8.validationErrors && e8.validationErrors.length > 0) {
      const t3 = `upload.${e8.validationErrors[0]}`;
      n8 = s7.toLanguageString(t3, y[t3]);
    }
    return n8;
  }
  /**
   * @hidden
   */
  getFileExtensionIcon(e8) {
    switch (e8.extension) {
      case ".png":
      case ".jpg":
      case ".jpeg":
      case ".tiff":
      case ".bmp":
      case ".gif":
        return { name: "file-image", icon: fileImageIcon };
      case ".mp3":
      case ".mp4":
      case ".wav":
        return { name: "file-audio", icon: fileAudioIcon };
      case ".mkv":
      case ".webm":
      case ".flv":
      case ".gifv":
      case ".avi":
      case ".wmv":
        return { name: "file-video", icon: fileVideoIcon };
      case ".txt":
        return { name: "file-txt", icon: fileTxtIcon };
      case ".pdf":
        return { name: "file-pdf", icon: filePdfIcon };
      case ".ppt":
      case ".pptx":
        return { name: "file-presentation", icon: filePresentationIcon };
      case ".csv":
      case ".xls":
      case ".xlsx":
        return { name: "file-data", icon: fileDataIcon };
      case ".html":
      case ".css":
      case ".js":
      case ".ts":
        return { name: "file-programming", icon: fileProgrammingIcon };
      case ".exe":
        return { name: "file-config", icon: fileConfigIcon };
      case ".zip":
      case ".rar":
        return { name: "file-zip", icon: fileZipIcon };
      case ".doc":
      case ".docm":
      case ".docx":
        return { name: "file-zip", icon: fileWordIcon };
      default:
        return { name: "file", icon: fileIcon };
    }
  }
  /**
   * @hidden
   */
  renderValidationError(e8, i7) {
    return a3.createElement("span", { className: "k-file-info", key: "2" }, a3.createElement("span", { className: "k-file-name", title: e8.name }, e8.name), a3.createElement("span", { className: "k-file-validation-message" }, this.getFileValidationMessage(e8, i7)));
  }
  /**
   * @hidden
   */
  renderFileDetails(e8) {
    const s7 = s(this).toLanguageString(U, y[U]);
    return a3.createElement("span", { className: "k-file-info", key: "2" }, a3.createElement("span", { className: "k-file-name", title: e8.name }, e8.name), e8.progress !== 100 ? a3.createElement("span", { className: "k-file-size" }, v5.getTotalFilesSizeMessage([e8])) : a3.createElement("span", { className: "k-file-validation-message" }, s7));
  }
  /**
   * @hidden
   */
  render() {
    const { files: e8, ...i7 } = this.props, s7 = e8[0], [, n8, t3, o5] = v5.getFileStatus([s7]), f5 = !o5 && !n8 && !t3;
    return a3.createElement(
      "div",
      {
        className: o(
          "k-file-single"
        )
      },
      f5 && a3.createElement(k, { value: s7.progress || 0 }),
      a3.createElement("span", { className: "k-file-icon-wrapper", key: "1" }, a3.createElement(v, { className: "k-file-icon", ...this.getFileExtensionIcon(s7), size: "xxlarge" }), a3.createElement("span", { className: "k-file-state" })),
      o5 || t3 ? this.renderValidationError(s7, t3) : this.renderFileDetails(s7),
      a3.createElement(
        F3,
        {
          uid: s7.uid,
          status: s7.status,
          progress: s7.progress,
          ...i7
        }
      )
    );
  }
};
v2(M);

// node_modules/@progress/kendo-react-upload/UploadListMultiItem.mjs
var a4 = __toESM(require_react(), 1);
var z2 = class extends a4.Component {
  constructor() {
    super(...arguments), this.mapFiles = () => {
      const { files: e8 } = this.props;
      return e8.map((s7) => a4.createElement("span", { key: s7.name, className: "k-file-info" }, a4.createElement("span", { className: "k-file-name", title: s7.name }, s7.name), v5.fileHasValidationErrors(s7) ? a4.createElement("span", { className: "k-file-validation-message" }, this.getFileValidationMessage(s7)) : a4.createElement("span", { key: `${s7.name}-size`, className: "k-file-size" }, v5.getTotalFilesSizeMessage([s7]))));
    }, this.progress = () => {
      const { files: e8 } = this.props;
      let s7 = 0;
      return e8.forEach((t3) => {
        s7 += t3.progress || 0;
      }), s7 / e8.length;
    };
  }
  /**
   * @hidden
   */
  getFileValidationMessage(e8) {
    const s7 = s(this);
    let t3 = "";
    if (e8.validationErrors && e8.validationErrors.length > 0) {
      const i7 = `upload.${e8.validationErrors[0]}`;
      t3 = s7.toLanguageString(i7, y[i7]);
    }
    return t3;
  }
  render() {
    const { files: e8, ...s7 } = this.props, [, t3, i7, d5] = v5.getFileStatus(e8), r6 = s(this), f5 = r6.toLanguageString(S, y[S]), E4 = r6.toLanguageString(v4, y[v4]), h5 = r6.toLanguageString(h, y[h]), k2 = r6.toLanguageString(U, y[U]), n8 = this.progress();
    return a4.createElement(
      "div",
      {
        className: o(
          "k-file-multiple"
        )
      },
      !d5 && !t3 && !i7 && a4.createElement(k, { value: n8 || 0 }),
      a4.createElement("span", { className: "k-file-icon-wrapper" }, a4.createElement(v, { className: "k-file-icon", name: "copy", icon: copyIcon, size: "xxlarge" })),
      a4.createElement("span", { className: "k-multiple-files-wrapper" }, this.mapFiles(), i7 ? a4.createElement("span", { className: "k-file-validation-message" }, `${e8.length} ${h5}`) : n8 !== 100 ? a4.createElement("span", { className: "k-file-summary" }, `${f5}: ${e8.length} ${E4}, ${v5.getTotalFilesSizeMessage(e8)}`) : a4.createElement("span", { className: "k-file-summary k-text-success" }, `${e8.length} ${k2}`)),
      a4.createElement(
        F3,
        {
          uid: e8[0].uid,
          status: e8[0].status,
          progress: n8,
          ...s7
        }
      )
    );
  }
};
v2(z2);

// node_modules/@progress/kendo-react-upload/UploadListGroup.mjs
var N2 = class extends n3.Component {
  constructor() {
    super(...arguments), this._element = null, this.onClick = () => {
      this.props.onClick.call(void 0, this.props.index);
    };
  }
  componentDidUpdate() {
    const { navigationIndex: e8, index: s7 } = this.props, o5 = o3(document);
    e8 === s7 && this._element && o5 !== this._element && this._element.focus();
  }
  render() {
    const {
      files: e8,
      async: s7,
      disabled: o5,
      navigationIndex: l6,
      index: a6,
      listItemUI: r6,
      onCancel: m8,
      onRemove: c5,
      onRetry: p5
    } = this.props, t3 = e8[0], d5 = t3.status === n.Uploaded || t3.status === n.Initial, u5 = o(
      "k-file",
      v5.filesHaveValidationErrors(e8) ? "k-file-error k-file-invalid" : "",
      t3.status === n.UploadFailed || t3.status === n.RemoveFailed ? "k-file-error" : "",
      t3.status === n.Uploading ? "k-file-progress" : "",
      d5 ? "k-file-success" : "",
      l6 === a6 ? "k-focus" : ""
    ), f5 = {
      async: s7,
      disabled: o5,
      onCancel: m8,
      onRemove: c5,
      onRetry: p5
    };
    let h5 = r6 || (e8.length === 1 ? M : z2);
    return n3.createElement(
      "li",
      {
        ref: (k2) => this._element = k2,
        className: u5,
        "data-uid": t3.uid,
        tabIndex: -1,
        onClick: this.onClick
      },
      n3.createElement(h5, { files: e8, ...f5 })
    );
  }
};

// node_modules/@progress/kendo-react-upload/UploadList.mjs
var u2 = class extends s3.Component {
  mapListGroups() {
    const { groupedFiles: e8, navigationIndex: r6, ...o5 } = this.props;
    return Object.keys(e8).map((t3, a6) => {
      const p5 = e8[t3];
      return s3.createElement(
        N2,
        {
          key: t3,
          files: p5,
          index: a6,
          navigationIndex: r6,
          ...o5
        }
      );
    });
  }
  render() {
    const e8 = o(
      "k-upload-files",
      "k-reset"
    );
    return s3.createElement("ul", { className: e8 }, this.mapListGroups());
  }
};

// node_modules/@progress/kendo-react-upload/UploadAddButton.mjs
var n5 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-upload/UploadInput.mjs
var n4 = __toESM(require_react(), 1);
var y2 = /(chrome)[ \/]([\w.]+)/i;
var A = /(webkit)[ \/]([\w.]+)/i;
var E2 = class extends n4.Component {
  constructor() {
    super(...arguments), this._input = null, this.onMouseDown = (t3) => {
      this.props.onMouseDown && this.props.onMouseDown(t3);
    }, this.onAdd = () => {
      const t3 = navigator.userAgent, e8 = this._input;
      e8 && (this.props.onAdd && e8.files && this.props.onAdd.call(void 0, e8.files), !t3.match(y2) && t3.match(A) || (e8.type = "", e8.type = "file"));
    };
  }
  get actionElement() {
    return this._input;
  }
  render() {
    const { multiple: t3, async: e8, disabled: l6, accept: c5, hasFiles: p5, ariaLabelledBy: i7, ariaDescribedBy: d5, id: u5 } = this.props, s7 = s(this), o5 = p5 ? r : F, h5 = s7.toLanguageString(o5, y[o5]), m8 = s7.toLanguageString(u, y[u]);
    return n4.createElement(
      "input",
      {
        id: u5,
        ref: (g3) => this._input = g3,
        className: "k-hidden",
        autoComplete: "off",
        name: e8.saveField,
        accept: c5,
        type: "file",
        multiple: t3,
        disabled: l6,
        onChange: this.onAdd,
        onMouseDown: this.onMouseDown,
        title: h5,
        "aria-label": i7 !== void 0 ? void 0 : m8,
        "aria-labelledby": i7,
        "aria-describedby": d5
      }
    );
  }
};
v2(E2);

// node_modules/@progress/kendo-react-upload/UploadAddButton.mjs
var x2 = (i7) => n5.createElement("span", { "aria-hidden": true }, i7.message);
var _ = class extends n5.Component {
  constructor() {
    super(...arguments), this._element = null, this._uploadInput = null, this.focus = () => {
      this._element && this._element.focus();
    }, this.onClick = () => {
      this.actionElement && this.actionElement.click(), this.props.onClick.call(void 0, this.props.addButtonIndex);
    }, this.onInputMouseDown = (e8) => {
      this._element && (e8.preventDefault(), this._element.focus());
    };
  }
  get actionElement() {
    if (this._uploadInput)
      return this._uploadInput.actionElement;
  }
  componentDidUpdate(e8) {
    const { navigationIndex: o5, addButtonIndex: s7, notFocusedIndex: t3 } = this.props;
    o5 !== e8.navigationIndex && e8.navigationIndex !== t3 && o5 === s7 && this._element && this._element.focus();
  }
  render() {
    const { navigationIndex: e8, addButtonIndex: o5, tabIndex: s7, id: t3, selectMessageUI: a6, ...r6 } = this.props, l6 = s(this).toLanguageString(u, y[u]), u5 = a6 || x2;
    return n5.createElement("div", { className: "k-upload-button-wrap" }, n5.createElement(
      v3,
      {
        type: "button",
        id: t3 ? `${t3}-select-button` : "select-button",
        className: o(
          "k-upload-button",
          e8 === o5 ? "k-focus" : ""
        ),
        themeColor: "base",
        tabIndex: s7,
        onClick: this.onClick,
        "aria-label": l6
      },
      n5.createElement(u5, { message: l6 })
    ), n5.createElement(
      E2,
      {
        id: t3 ? `${t3}-files` : "files",
        ...r6,
        onMouseDown: this.onInputMouseDown,
        ref: (d5) => this._uploadInput = d5
      }
    ));
  }
};
v2(_);

// node_modules/@progress/kendo-react-upload/UploadActionButtons.mjs
var n6 = __toESM(require_react(), 1);
var b = class extends n6.Component {
  constructor() {
    super(...arguments), this._uploadElement = null, this._clearElement = null, this.onClearClick = () => {
      this.props.disabled || this.props.onClear && this.props.onClear.call(void 0);
    }, this.onUploadClick = () => {
      this.props.disabled || (this.props.onClick.call(void 0, this.props.uploadButtonIndex), this.props.onUpload && this.props.onUpload.call(void 0));
    };
  }
  componentDidUpdate(e8) {
    const { navigationIndex: t3, clearButtonIndex: s7, uploadButtonIndex: i7 } = this.props;
    t3 !== e8.navigationIndex && (t3 === s7 && this._clearElement && this._clearElement.focus(), t3 === i7 && this._uploadElement && this._uploadElement.focus());
  }
  render() {
    const { disabled: e8, navigationIndex: t3, clearButtonIndex: s7, uploadButtonIndex: i7, actionsLayout: o5 } = this.props, r6 = s(this), p5 = o(
      "k-actions",
      "k-hstack",
      {
        "k-justify-content-start": o5 === "start",
        "k-justify-content-center": o5 === "center",
        "k-justify-content-end": o5 === "end",
        "k-justify-content-stretch": o5 === "stretched"
      }
    ), m8 = o(
      "k-button k-button-md k-rounded-md k-button-solid k-button-solid-base",
      "k-clear-selected",
      e8 ? "k-disabled" : "",
      t3 === s7 ? "k-focus" : ""
    ), k2 = o(
      "k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary",
      "k-primary",
      "k-upload-selected",
      e8 ? "k-disabled" : "",
      t3 === i7 ? "k-focus" : ""
    );
    return n6.createElement("div", { className: p5 }, n6.createElement(
      "button",
      {
        ref: (a6) => this._clearElement = a6,
        type: "button",
        className: m8,
        tabIndex: -1,
        onClick: this.onClearClick
      },
      r6.toLanguageString(l2, y[l2])
    ), n6.createElement(
      "button",
      {
        ref: (a6) => this._uploadElement = a6,
        type: "button",
        className: k2,
        tabIndex: -1,
        onClick: this.onUploadClick
      },
      r6.toLanguageString(f, y[f])
    ));
  }
};
v2(b);

// node_modules/@progress/kendo-react-upload/UploadDropZone.mjs
var n7 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-upload/UploadStatus.mjs
var i4 = __toESM(require_react(), 1);
var v6 = class extends i4.Component {
  render() {
    const { isUploading: e8, isUploaded: t3, isUploadFailed: o5 } = this.props, l6 = o(
      "k-upload-status"
    ), m8 = !e8 && !o5 && t3 ? "check" : !e8 && o5 ? "exclamation-circle" : e8 ? "upload" : "", p5 = !e8 && !o5 && t3 ? { icon: checkIcon } : !e8 && o5 ? { icon: exclamationCircleIcon } : e8 ? { icon: uploadIcon } : {};
    let a6 = "";
    const s7 = s(this);
    return e8 ? a6 = s7.toLanguageString(a2, y[a2]) : (t3 || o5) && (a6 = s7.toLanguageString(t, y[t])), i4.createElement("div", { className: l6 }, i4.createElement(v, { name: m8, ...p5 }), a6);
  }
};
v2(v6);

// node_modules/@progress/kendo-react-upload/UploadDropZone.mjs
var r3 = 100;
var A2 = class extends n7.Component {
  constructor() {
    super(...arguments), this._lastDocumentDragOver = null, this._lastElementDragOver = null, this._documentActive = false, this._elementActive = false, this.onDocumentDragEnter = () => {
      if (!this.documentActive) {
        this.documentActive = true;
        const e8 = () => {
          this.isDragOver(this._lastDocumentDragOver) && (this.documentActive = false, clearInterval(this._documentInterval), this._documentInterval = null, this._lastDocumentDragOver = null);
        };
        this._documentInterval = setInterval(e8, r3);
      }
    }, this.onDocumentDragOver = () => {
      this._lastDocumentDragOver = /* @__PURE__ */ new Date();
    }, this.onElementDragEnter = () => {
      if (!this.elementActive) {
        this.elementActive = true;
        const e8 = () => {
          this.isDragOver(this._lastElementDragOver) && (this.elementActive = false, clearInterval(this._elementInterval), this._elementInterval = null, this._lastElementDragOver = null);
        };
        this._elementInterval = setInterval(e8, r3);
      }
    }, this.onElementDragOver = (e8) => {
      e8.preventDefault(), this._lastElementDragOver = /* @__PURE__ */ new Date();
    }, this.onDrop = (e8) => {
      e8.preventDefault();
      let t3 = e8.dataTransfer.files;
      t3.length > 0 && !this.props.disabled && this.props.onAdd && (this.props.multiple || t3.length <= 1) && this.props.onAdd.call(void 0, t3);
    }, this.isDragOver = (e8) => (/* @__PURE__ */ new Date()).getTime() - (e8 || /* @__PURE__ */ new Date()).getTime() > r3;
  }
  get documentActive() {
    return this._documentActive;
  }
  set documentActive(e8) {
    const t3 = this.documentActive;
    this._documentActive = e8, e8 !== t3 && this.forceUpdate();
  }
  get elementActive() {
    return this._elementActive;
  }
  set elementActive(e8) {
    const t3 = this._elementActive;
    this._elementActive = e8, e8 !== t3 && this.setState({});
  }
  componentDidMount() {
    document.addEventListener("dragenter", this.onDocumentDragEnter), document.addEventListener("dragover", this.onDocumentDragOver);
  }
  componentWillUnmount() {
    document.removeEventListener("dragenter", this.onDocumentDragEnter), document.removeEventListener("dragover", this.onDocumentDragOver);
  }
  render() {
    const { addButtonComponent: e8, fileGroup: t3 } = this.props, c5 = s(this).toLanguageString(o4, y[o4]), m8 = o(
      "k-dropzone k-upload-dropzone",
      this.documentActive ? "k-dropzone-active" : "",
      this.elementActive ? "k-dropzone-hovered" : ""
    ), [i7, o5, s7, v8] = v5.getFileStatus(t3), d5 = o(
      "k-dropzone-hint",
      {
        // Unsure about that, since it hides the "Drop Files Message" when we remove all uploaded components.
        // 'k-hidden': this.isDragged && !this.elementActive
      }
    );
    return n7.createElement(
      "div",
      {
        className: m8,
        onDrop: this.onDrop,
        onDragEnter: this.onElementDragEnter,
        onDragOver: this.onElementDragOver
      },
      e8,
      i7 || o5 || s7 || v8 ? n7.createElement(v6, { isUploading: i7, isUploaded: o5, isUploadFailed: s7 }) : n7.createElement("div", { className: d5 }, c5)
    );
  }
};
v2(A2);

// node_modules/@progress/kendo-react-upload/UploadUI.mjs
var R2 = -1;
var m3 = class m4 extends s4.Component {
  constructor() {
    super(...arguments), this._container = null, this._uploadAddButton = null, this.focus = () => {
      if (this._uploadAddButton)
        return this._uploadAddButton.focus();
    }, this.onAdd = (o5) => {
      this.props.onAdd && this.props.onAdd.call(void 0, o5);
    }, this.onRetry = (o5) => {
      this.props.onRetry && this.props.onRetry.call(void 0, o5);
    }, this.onCancel = (o5) => {
      this.props.onCancel && this.props.onCancel.call(void 0, o5);
    }, this.onClear = () => {
      this.props.onClear && this.props.onClear.call(void 0);
    }, this.onUpload = () => {
      this.props.onUpload && this.props.onUpload.call(void 0);
    }, this.onRemove = (o5) => {
      this.props.onRemove && this.props.onRemove.call(void 0, o5);
    }, this.onKeyDown = (o5) => {
      this.props.onKeyDown && this.props.onKeyDown.call(void 0, o5, this.isRtl);
    }, this.onFocus = (o5) => {
      this.props.onFocus && this.props.onFocus.call(void 0, o5);
    }, this.onBlur = (o5) => {
      this.props.onBlur && this.props.onBlur.call(void 0, o5);
    }, this.onClick = (o5) => {
      this.props.onClick && this.props.onClick.call(void 0, o5);
    };
  }
  get async() {
    const {
      autoUpload: o5,
      batch: t3,
      withCredentials: i7,
      saveField: r6,
      saveHeaders: l6,
      saveMethod: e8,
      saveUrl: n8,
      responseType: d5,
      removeField: a6,
      removeHeaders: p5,
      removeMethod: c5,
      removeUrl: h5
    } = this.props;
    return {
      autoUpload: o5,
      batch: t3,
      withCredentials: i7,
      saveField: r6,
      saveHeaders: l6,
      saveMethod: e8,
      saveUrl: n8,
      responseType: d5,
      removeField: a6,
      removeHeaders: p5,
      removeMethod: c5,
      removeUrl: h5
    };
  }
  get groupsCount() {
    return Object.keys(this.props.groupedFiles).length;
  }
  get lastGroupIndex() {
    return this.groupsCount - 1;
  }
  get addButtonIndex() {
    return R2;
  }
  get clearButtonIndex() {
    return this.lastGroupIndex + 1;
  }
  get uploadButtonIndex() {
    return this.lastGroupIndex + 2;
  }
  get isRtl() {
    return this._container && getComputedStyle(this._container).direction === "rtl" || false;
  }
  /**
   * @hidden
   */
  get actionElement() {
    if (this._uploadAddButton)
      return this._uploadAddButton.actionElement;
  }
  /**
   * @hidden
   */
  render() {
    const {
      multiple: o5,
      disabled: t3,
      tabIndex: i7,
      accept: r6,
      showFileList: l6,
      groupedFiles: e8,
      navigationIndex: n8,
      showActionButtons: d5,
      actionsLayout: a6,
      notFocusedIndex: p5,
      listItemUI: c5,
      id: h5,
      ariaLabelledBy: v8,
      ariaDescribedBy: B,
      selectMessageUI: C3
    } = this.props, y3 = o(
      "k-upload",
      this.props.className,
      t3 ? "k-disabled" : ""
    ), g3 = s4.createElement(
      _,
      {
        id: h5,
        ariaLabelledBy: v8,
        ariaDescribedBy: B,
        ref: (u5) => this._uploadAddButton = u5,
        accept: r6,
        async: this.async,
        addButtonIndex: this.addButtonIndex,
        navigationIndex: n8,
        notFocusedIndex: p5,
        tabIndex: i7,
        multiple: o5,
        disabled: t3,
        hasFiles: e8 ? Object.keys(e8).length > 0 : false,
        selectMessageUI: C3,
        onAdd: this.onAdd,
        onClick: this.onClick
      }
    );
    return s4.createElement(
      "div",
      {
        ref: (u5) => this._container = u5,
        className: y3,
        onKeyDown: this.onKeyDown,
        onFocus: this.onFocus,
        onBlur: this.onBlur
      },
      s4.createElement(
        A2,
        {
          addButtonComponent: g3,
          fileGroup: e8,
          disabled: t3,
          multiple: o5,
          onAdd: this.onAdd
        }
      ),
      l6 ? s4.createElement(
        u2,
        {
          groupedFiles: e8,
          disabled: t3,
          async: this.async,
          navigationIndex: n8,
          listItemUI: c5,
          onCancel: this.onCancel,
          onRemove: this.onRemove,
          onRetry: this.onRetry,
          onClick: this.onClick
        }
      ) : void 0,
      d5 ? s4.createElement(
        b,
        {
          disabled: t3,
          navigationIndex: n8,
          clearButtonIndex: this.clearButtonIndex,
          uploadButtonIndex: this.uploadButtonIndex,
          actionsLayout: a6,
          onUpload: this.onUpload,
          onClear: this.onClear,
          onClick: this.onClick
        }
      ) : void 0
    );
  }
};
m3.defaultProps = {
  disabled: false,
  groupedFiles: {},
  multiple: true,
  actionsLayout: "end"
};
var f3 = m3;

// node_modules/@progress/kendo-react-upload/Upload.mjs
var S3 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-upload/UploadNavigation.mjs
var m5 = __toESM(require_react(), 1);
var h3 = -2;
var s5 = -1;
var C = class extends m5.Component {
  constructor(a6) {
    super(a6), this._uploadUI = null, this.focus = () => {
      this._uploadUI && this._uploadUI.focus();
    }, this.onKeyDown = (o5, r6) => {
      const e8 = this.navIndex, d5 = Object.keys(this.props.groupedFiles), l6 = d5.length - 1, p5 = this.props.autoUpload || d5.length === 0 ? l6 : l6 + 1, c5 = l6 + 1, v8 = c5 + 1, i7 = e8 === h3 ? s5 : e8;
      let t3 = e8;
      switch (o5.keyCode) {
        case e2.up:
          e8 > -1 && (t3 = i7 - 1);
          break;
        case e2.down:
          e8 < p5 && (t3 = i7 + 1);
          break;
        case e2.left:
          r6 ? e8 === c5 && (t3 = i7 + 1) : e8 === v8 && (t3 = i7 - 1);
          break;
        case e2.right:
          r6 ? e8 === v8 && (t3 = i7 - 1) : e8 === c5 && (t3 = i7 + 1);
          break;
        case e2.enter:
          if (e8 === s5 || e8 === h3) {
            const u5 = o3(document);
            this.actionElement && e && (u5 == null ? void 0 : u5.className.indexOf("k-upload-button")) === -1 && this.actionElement.click();
          }
          e8 >= 0 && e8 <= l6 && this.onRetry(d5[e8]);
          break;
        case e2.space:
          (e8 === s5 || e8 === h3) && this.actionElement && this.actionElement.click(), o5.preventDefault();
          break;
        case e2.tab:
          t3 = h3;
          break;
        case e2.delete:
          e8 >= 0 && e8 <= l6 && (t3 = i7 - 1, this.onRemove(d5[e8]));
          break;
        case e2.esc:
          e8 >= 0 && e8 <= l6 && (t3 = i7 - 1, this.onCancel(d5[e8]));
          break;
      }
      this.navIndex = t3;
    }, this.onCancel = (o5) => {
      this.props.onCancel && this.props.onCancel.call(void 0, o5);
    }, this.onClear = () => {
      this.navIndex = s5, this.props.onClear && this.props.onClear.call(void 0);
    }, this.onUpload = () => {
      this.navIndex = s5, this.props.onUpload && this.props.onUpload.call(void 0);
    }, this.onRetry = (o5) => {
      this.props.onRetry && this.props.onRetry.call(void 0, o5);
    }, this.onRemove = (o5) => {
      this.navIndex = this.navIndex > s5 ? this.navIndex - 1 : s5, this.props.onRemove && this.props.onRemove.call(void 0, o5);
    }, this.onAdd = (o5) => {
      this.navIndex = s5, this.props.onAdd && this.props.onAdd.call(void 0, o5);
    }, this.onClick = (o5) => {
      this.navIndex = o5;
    }, this.onFocus = () => {
      this._blurTimeout && (clearTimeout(this._blurTimeout), this._blurTimeout = void 0);
    }, this.onBlurTimeout = () => {
      this.navIndex = h3, this._blurTimeout = void 0;
    }, this.onBlur = () => {
      clearTimeout(this._blurTimeout), this._blurTimeout = window.setTimeout(this.onBlurTimeout);
    }, this._navIndex = h3;
  }
  get navIndex() {
    return this._navIndex;
  }
  set navIndex(a6) {
    const o5 = this.navIndex;
    this._navIndex = a6, a6 !== o5 && this.forceUpdate();
  }
  get actionElement() {
    if (this._uploadUI)
      return this._uploadUI.actionElement;
  }
  componentDidUpdate(a6) {
    const o5 = Object.keys(a6.groupedFiles).length, r6 = Object.keys(this.props.groupedFiles).length;
    o5 > r6 && this.navIndex > s5 && (this.navIndex = this.navIndex - (o5 - r6));
  }
  render() {
    const { onClear: a6, onRemove: o5, onRetry: r6, onCancel: e8, onUpload: d5, onAdd: l6, ...p5 } = this.props;
    return m5.createElement(
      f3,
      {
        ref: (c5) => this._uploadUI = c5,
        className: this.props.className,
        onKeyDown: this.onKeyDown,
        navigationIndex: this.navIndex,
        notFocusedIndex: h3,
        onAdd: this.onAdd,
        onClear: this.onClear,
        onUpload: this.onUpload,
        onRemove: this.onRemove,
        onRetry: this.onRetry,
        onCancel: this.onCancel,
        onClick: this.onClick,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        ...p5
      }
    );
  }
};

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var { iterator, toStringTag } = Symbol;
var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(toStringTag in val) && !(iterator in val);
};
var isEmptyObject = (val) => {
  if (!isObject(val) || isBuffer(val)) {
    return false;
  }
  try {
    return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
  } catch (e8) {
    return false;
  }
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i7;
  let l6;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i7 = 0, l6 = obj.length; i7 < l6; i7++) {
      fn.call(null, obj[i7], i7, obj);
    }
  } else {
    if (isBuffer(obj)) {
      return;
    }
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i7 = 0; i7 < len; i7++) {
      key = keys[i7];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  if (isBuffer(obj)) {
    return null;
  }
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i7 = keys.length;
  let _key;
  while (i7-- > 0) {
    _key = keys[i7];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless, skipUndefined } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else if (!skipUndefined || !isUndefined(val)) {
      result[targetKey] = val;
    }
  };
  for (let i7 = 0, l6 = arguments.length; i7 < l6; i7++) {
    arguments[i7] && forEach(arguments[i7], assignValue);
  }
  return result;
}
var extend = (a6, b2, thisArg, { allOwnKeys } = {}) => {
  forEach(b2, (val, key) => {
    if (thisArg && isFunction(val)) {
      a6[key] = bind(val, thisArg);
    } else {
      a6[key] = val;
    }
  }, { allOwnKeys });
  return a6;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i7;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i7 = props.length;
    while (i7-- > 0) {
      prop = props[i7];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i7 = thing.length;
  if (!isNumber(i7)) return null;
  const arr = new Array(i7);
  while (i7-- > 0) {
    arr[i7] = thing[i7];
  }
  return arr;
};
var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator];
  const _iterator = generator.call(obj);
  let result;
  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m8, p1, p22) {
      return p1.toUpperCase() + p22;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i7) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (isBuffer(source)) {
        return source;
      }
      if (!("toJSON" in source)) {
        stack[i7] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i7 + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i7] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction(_global.postMessage)
);
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var isIterable = (thing) => thing != null && isFunction(thing[iterator]);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isEmptyObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  const msg = error && error.message ? error.message : "Error";
  const errCode = code == null && error ? error.code : code;
  AxiosError.call(axiosError, msg, errCode, config, request, response);
  if (error && axiosError.cause == null) {
    Object.defineProperty(axiosError, "cause", { value: error, configurable: true });
  }
  axiosError.name = error && error.name || "Error";
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i7) {
    token = removeBrackets(token);
    return !dots && i7 ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (utils_default.isBoolean(value)) {
      return value.toString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  if (utils_default.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h5) {
      if (h5 !== null) {
        fn(h5);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var _navigator = typeof navigator === "object" && navigator || void 0;
var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), {
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    },
    ...options
  });
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i7;
  const len = keys.length;
  let key;
  for (i7 = 0; i7 < len; i7++) {
    key = keys[i7];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e8) {
      if (e8.name !== "SyntaxError") {
        throw e8;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data, this.parseReviver);
      } catch (e8) {
        if (strictJSONParsing) {
          if (e8.name === "SyntaxError") {
            throw AxiosError_default.from(e8, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e8;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i7;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i7 = line.indexOf(":");
    key = line.substring(0, i7).trim().toLowerCase();
    val = line.substring(i7 + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isObject(header) && utils_default.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils_default.isArray(entry)) {
          throw TypeError("Object iterator must return a key-value pair");
        }
        obj[key = entry[0]] = (dest = obj[key]) ? utils_default.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
      }
      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i7 = keys.length;
    let deleted = false;
    while (i7--) {
      const key = keys[i7];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i7 = tail;
    let bytesCount = 0;
    while (i7 !== head) {
      bytesCount += bytes[i7++];
      i7 = i7 % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn(...args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e8) => {
    const loaded = e8.loaded;
    const total = e8.lengthComputable ? e8.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e8,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
  url = new URL(url, platform_default.origin);
  return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
})(
  new URL(platform_default.origin),
  platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
) : () => true;

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a6, b2, prop, caseless) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(a6, b2, prop, caseless);
    } else if (!utils_default.isUndefined(a6)) {
      return getMergedValue(void 0, a6, prop, caseless);
    }
  }
  function valueFromConfig2(a6, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    }
  }
  function defaultToConfig2(a6, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    } else if (!utils_default.isUndefined(a6)) {
      return getMergedValue(void 0, a6);
    }
  }
  function mergeDirectKeys(a6, b2, prop) {
    if (prop in config2) {
      return getMergedValue(a6, b2);
    } else if (prop in config1) {
      return getMergedValue(void 0, a6);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a6, b2, prop) => mergeDeepProperties(headersToObject(a6), headersToObject(b2), prop, true)
  };
  utils_default.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if (utils_default.isFunction(data.getHeaders)) {
      const formHeaders = data.getHeaders();
      const allowedHeaders = ["content-type", "content-length"];
      Object.entries(formHeaders).forEach(([key, val]) => {
        if (allowedHeaders.includes(key.toLowerCase())) {
          headers.set(key, val);
        }
      });
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError(event) {
      const msg = event && event.message ? event.message : "Network Error";
      const err = new AxiosError_default(msg, AxiosError_default.ERR_NETWORK, config, request);
      err.event = event || null;
      reject(err);
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils_default.asap(unsubscribe);
    return signal;
  }
};
var composeSignals_default = composeSignals;

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
var readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
var trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator2 = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e8) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e8);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator2.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator2.return();
    }
  }, {
    highWaterMark: 2
  });
};

// node_modules/axios/lib/adapters/fetch.js
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var { isFunction: isFunction2 } = utils_default;
var globalFetchAPI = (({ Request, Response }) => ({
  Request,
  Response
}))(utils_default.global);
var {
  ReadableStream: ReadableStream2,
  TextEncoder
} = utils_default.global;
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e8) {
    return false;
  }
};
var factory = (env) => {
  env = utils_default.merge.call({
    skipUndefined: true
  }, globalFetchAPI, env);
  const { fetch: envFetch, Request, Response } = env;
  const isFetchSupported = envFetch ? isFunction2(envFetch) : typeof fetch === "function";
  const isRequestSupported = isFunction2(Request);
  const isResponseSupported = isFunction2(Response);
  if (!isFetchSupported) {
    return false;
  }
  const isReadableStreamSupported = isFetchSupported && isFunction2(ReadableStream2);
  const encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Request(str).arrayBuffer()));
  const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test(() => {
    let duplexAccessed = false;
    const hasContentType = new Request(platform_default.origin, {
      body: new ReadableStream2(),
      method: "POST",
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
    return duplexAccessed && !hasContentType;
  });
  const supportsResponseStream = isResponseSupported && isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
  const resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };
  isFetchSupported && (() => {
    ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
      !resolvers[type] && (resolvers[type] = (res, config) => {
        let method = res && res[type];
        if (method) {
          return method.call(res);
        }
        throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
      });
    });
  })();
  const getBodyLength = async (body) => {
    if (body == null) {
      return 0;
    }
    if (utils_default.isBlob(body)) {
      return body.size;
    }
    if (utils_default.isSpecCompliantForm(body)) {
      const _request = new Request(platform_default.origin, {
        method: "POST",
        body
      });
      return (await _request.arrayBuffer()).byteLength;
    }
    if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
      return body.byteLength;
    }
    if (utils_default.isURLSearchParams(body)) {
      body = body + "";
    }
    if (utils_default.isString(body)) {
      return (await encodeText(body)).byteLength;
    }
  };
  const resolveBodyLength = async (headers, body) => {
    const length = utils_default.toFiniteNumber(headers.getContentLength());
    return length == null ? getBodyLength(body) : length;
  };
  return async (config) => {
    let {
      url,
      method,
      data,
      signal,
      cancelToken,
      timeout,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = "same-origin",
      fetchOptions
    } = resolveConfig_default(config);
    let _fetch = envFetch || fetch;
    responseType = responseType ? (responseType + "").toLowerCase() : "text";
    let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
    let request = null;
    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
    });
    let requestContentLength;
    try {
      if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
        let _request = new Request(url, {
          method: "POST",
          body: data,
          duplex: "half"
        });
        let contentTypeHeader;
        if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
          headers.setContentType(contentTypeHeader);
        }
        if (_request.body) {
          const [onProgress, flush] = progressEventDecorator(
            requestContentLength,
            progressEventReducer(asyncDecorator(onUploadProgress))
          );
          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
        }
      }
      if (!utils_default.isString(withCredentials)) {
        withCredentials = withCredentials ? "include" : "omit";
      }
      const isCredentialsSupported = isRequestSupported && "credentials" in Request.prototype;
      const resolvedOptions = {
        ...fetchOptions,
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data,
        duplex: "half",
        credentials: isCredentialsSupported ? withCredentials : void 0
      };
      request = isRequestSupported && new Request(url, resolvedOptions);
      let response = await (isRequestSupported ? _fetch(request, fetchOptions) : _fetch(url, resolvedOptions));
      const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
      if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
        const options = {};
        ["status", "statusText", "headers"].forEach((prop) => {
          options[prop] = response[prop];
        });
        const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
          responseContentLength,
          progressEventReducer(asyncDecorator(onDownloadProgress), true)
        ) || [];
        response = new Response(
          trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
            flush && flush();
            unsubscribe && unsubscribe();
          }),
          options
        );
      }
      responseType = responseType || "text";
      let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
      !isStreamResponse && unsubscribe && unsubscribe();
      return await new Promise((resolve, reject) => {
        settle(resolve, reject, {
          data: responseData,
          headers: AxiosHeaders_default.from(response.headers),
          status: response.status,
          statusText: response.statusText,
          config,
          request
        });
      });
    } catch (err) {
      unsubscribe && unsubscribe();
      if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
        throw Object.assign(
          new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
          {
            cause: err.cause || err
          }
        );
      }
      throw AxiosError_default.from(err, err && err.code, config, request);
    }
  };
};
var seedCache = /* @__PURE__ */ new Map();
var getFetch = (config) => {
  let env = config ? config.env : {};
  const { fetch: fetch2, Request, Response } = env;
  const seeds = [
    Request,
    Response,
    fetch2
  ];
  let len = seeds.length, i7 = len, seed, target, map = seedCache;
  while (i7--) {
    seed = seeds[i7];
    target = map.get(seed);
    target === void 0 && map.set(seed, target = i7 ? /* @__PURE__ */ new Map() : factory(env));
    map = target;
  }
  return target;
};
var adapter = getFetch();

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default,
  fetch: {
    get: getFetch
  }
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e8) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter2) => utils_default.isFunction(adapter2) || adapter2 === null || adapter2 === false;
var adapters_default = {
  getAdapter: (adapters, config) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter2;
    const rejectedReasons = {};
    for (let i7 = 0; i7 < length; i7++) {
      nameOrAdapter = adapters[i7];
      let id;
      adapter2 = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter2 = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter2 === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter2 && (utils_default.isFunction(adapter2) || (adapter2 = adapter2.get(config)))) {
        break;
      }
      rejectedReasons[id || "#" + i7] = adapter2;
    }
    if (!adapter2) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s7 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s7,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter2;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter2 = adapters_default.getAdapter(config.adapter || defaults_default.adapter, config);
  return adapter2(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.12.2";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i7) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i7 < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i7 = keys.length;
  while (i7-- > 0) {
    const opt = keys[i7];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e8) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    if (config.allowAbsoluteUrls !== void 0) {
    } else if (this.defaults.allowAbsoluteUrls !== void 0) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }
    validator_default.assertOptions(config, {
      baseUrl: validators2.spelling("baseURL"),
      withXsrfToken: validators2.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i7 = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift(...requestInterceptorChain);
      chain.push(...responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i7 < len) {
        promise = promise.then(chain[i7++], chain[i7++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    while (i7 < len) {
      const onFulfilled = requestInterceptorChain[i7++];
      const onRejected = requestInterceptorChain[i7++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i7 = 0;
    len = responseInterceptorChain.length;
    while (i7 < len) {
      promise = promise.then(responseInterceptorChain[i7++], responseInterceptorChain[i7++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i7 = token._listeners.length;
      while (i7-- > 0) {
        token._listeners[i7](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c5) {
      cancel = c5;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/@progress/kendo-react-upload/utils/stateUtils.mjs
var d3 = (s7) => (s7 || []).map((t3) => ({
  ...t3
}));
var u3 = (s7, t3) => {
  t3.push(s7);
};
var l3 = (s7, t3) => {
  s7.forEach((o5) => u3(o5, t3));
};
var p3 = (s7) => {
  const t3 = {};
  return s7.forEach((o5) => {
    t3[o5.uid] ? t3[o5.uid].push(o5) : t3[o5.uid] = [o5];
  }), t3;
};
var i5 = (s7) => {
  let t3 = {};
  return r4(s7, (o5, a6) => {
    let n8 = true;
    o5.forEach((e8) => {
      (e8.status !== n.Selected || e8.validationErrors && e8.validationErrors.length > 0) && (n8 = false);
    }), n8 && (t3[a6] = o5);
  }), t3;
};
var h4 = (s7, t3) => {
  r4(s7, (o5) => {
    o5.forEach((a6) => {
      a6.status = t3;
    });
  });
};
var f4 = (s7) => {
  let t3 = [];
  return r4(s7, (o5) => {
    t3.push.apply(t3, o5);
  }), t3;
};
var r4 = (s7, t3) => {
  Object.keys(s7).forEach((o5) => {
    t3(s7[o5], o5);
  });
};
var F4 = {
  copyState: d3,
  addMany: l3,
  add: u3,
  groupFilesByUid: p3,
  filesForUpload: i5,
  setFilesStatus: h4,
  flatFileGroup: f4,
  groupForEach: r4
};

// node_modules/@progress/kendo-react-upload/utils/connectionUtils.mjs
var s6 = (t3, e8) => {
  Object.keys(e8).forEach((o5) => {
    t3.append(o5, e8[o5]);
  });
};
var p4 = (t3, e8, o5) => {
  let n8 = new FormData();
  return s6(n8, o5), t3.forEach((a6) => {
    const r6 = a6.getRawFile ? a6.getRawFile() : "";
    r6 ? n8.append(e8, r6, a6.name) : n8.append(e8, r6);
  }), n8;
};
var c3 = (t3, e8, o5) => {
  let n8 = new FormData();
  return s6(n8, o5), t3.forEach((a6) => {
    n8.append(e8, a6);
  }), n8;
};
var l4 = (t3, e8) => ({
  headers: t3,
  responseType: e8.responseType,
  withCredentials: e8.withCredentials
});
var u4 = (t3) => {
  let e8 = {};
  return Object.keys(t3).forEach((o5) => {
    e8[o5] = t3[o5];
  }), e8;
};
var d4 = (t3) => {
  const { data: e8, config: o5, ...n8 } = t3;
  return {
    response: e8,
    ...n8
  };
};
var i6 = {
  populateClientFormData: s6,
  populateUploadFormData: p4,
  populateRemoveFormData: c3,
  populateRequestOptions: l4,
  cloneRequestHeaders: u4,
  convertAxiosResponse: d4
};

// node_modules/@progress/kendo-react-upload/utils/validationUtils.mjs
var r5 = "invalidMaxFileSize";
var t2 = "invalidMinFileSize";
var e4 = "invalidFileExtension";
var E3 = (i7, n8) => {
  n8.length > 0 && n8.indexOf((i7.extension || "").toLowerCase()) < 0 && (i7.validationErrors = i7.validationErrors || [], i7.validationErrors.indexOf(e4) < 0 && i7.validationErrors.push(e4));
};
var l5 = (i7, n8, o5) => {
  n8 !== 0 && (i7.size || 0) < n8 && (i7.validationErrors = i7.validationErrors || [], i7.validationErrors.indexOf(t2) < 0 && i7.validationErrors.push(t2)), o5 !== 0 && (i7.size || 0) > o5 && (i7.validationErrors = i7.validationErrors || [], i7.validationErrors.indexOf(r5) < 0 && i7.validationErrors.push(r5));
};
var v7 = (i7) => i7.map((o5) => (o5.substring(0, 1) === "." ? o5 : "." + o5).toLowerCase());
var x3 = (i7, n8) => {
  const o5 = v7(n8.allowedExtensions || []), s7 = n8.maxFileSize || 0, d5 = n8.minFileSize || 0;
  let a6;
  for (a6 = 0; a6 < i7.length; a6++)
    E3(i7[a6], o5), l5(i7[a6], d5, s7);
};
var c4 = {
  validateFiles: x3
};

// node_modules/@progress/kendo-react-upload/package-metadata.mjs
var e5 = {
  name: "@progress/kendo-react-upload",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1712846736,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/components/my-license/"
};

// node_modules/@progress/kendo-react-upload/Upload.mjs
var m6 = class m7 extends S3.Component {
  constructor(v8) {
    super(v8), this._httpSubscriptions = {}, this._uploadNavigation = null, this.focus = () => {
      this._uploadNavigation && this._uploadNavigation.focus();
    }, this.triggerUpload = () => {
      this.onUpload();
    }, this.uploadFiles = (i7) => {
      const t3 = this.async;
      F4.setFilesStatus(i7, n.Uploading), F4.groupForEach(i7, (s7, a6) => {
        const n8 = i6.cloneRequestHeaders(t3.saveHeaders || {}), l6 = {
          target: this,
          files: s7,
          headers: n8,
          additionalData: {}
        };
        this.props.onBeforeUpload && this.props.onBeforeUpload.call(void 0, l6);
        const c5 = i6.populateRequestOptions(l6.headers, this.async), u5 = i6.populateUploadFormData(
          s7,
          t3.saveField,
          l6.additionalData
        );
        if (this.isCustomSave)
          this.props.saveUrl(s7, { formData: u5, requestOptions: c5 }, this.onUploadProgress).then((d5) => this.onUploadSuccess(d5.uid)).catch((d5) => this.onUploadError(d5.uid));
        else {
          const d5 = axios_default.CancelToken.source();
          this._httpSubscriptions[a6] = d5, axios_default({
            method: t3.saveMethod,
            url: t3.saveUrl,
            data: u5,
            cancelToken: d5.token,
            ...c5,
            onUploadProgress: (h5) => this.onUploadProgress(a6, h5)
          }).then((h5) => this.onUploadSuccess(a6, h5)).catch((h5) => this.onUploadError(a6, h5));
        }
      });
    }, this.removeFiles = (i7) => {
      const t3 = this.async;
      F4.groupForEach(i7, (s7, a6) => {
        const n8 = i6.cloneRequestHeaders(t3.removeHeaders || {}), l6 = {
          target: this,
          files: s7,
          headers: n8,
          additionalData: {}
        };
        this.props.onBeforeRemove && this.props.onBeforeRemove.call(void 0, l6);
        const c5 = s7.map((h5) => h5.name), u5 = i6.populateRequestOptions(l6.headers, this.async), d5 = i6.populateRemoveFormData(
          c5,
          t3.removeField,
          l6.additionalData
        );
        this.isCustomRemove ? this.props.removeUrl(s7, { formData: d5, requestOptions: u5 }).then((h5) => this.onRemoveSuccess(h5.uid)).catch((h5) => this.onRemoveError(h5.uid)) : axios_default({
          method: t3.removeMethod,
          url: t3.removeUrl,
          data: d5,
          ...u5
        }).then((h5) => this.onRemoveSuccess(a6, h5)).catch((h5) => this.onRemoveError(a6, h5));
      });
    }, this.onUpload = () => {
      const i7 = this.fileStateCopy, t3 = F4.groupFilesByUid(i7), s7 = F4.filesForUpload(t3);
      this.uploadFiles(s7);
      const a6 = () => {
        if (this.props.onStatusChange) {
          const n8 = {
            target: this,
            newState: i7,
            affectedFiles: F4.flatFileGroup(s7)
          };
          this.props.onStatusChange.call(void 0, n8);
        }
      };
      this.isControlled ? a6() : this.setState({ files: i7 }, a6);
    }, this.onAdd = (i7) => {
      let t3 = v5.getAllFileInfo(i7), s7;
      if (t3 = v5.assignGuidToFiles(t3, this.async.batch), c4.validateFiles(t3, this.props.restrictions), this.props.multiple ? s7 = this.fileStateCopy : s7 = [], F4.addMany(t3, s7), this.async.autoUpload) {
        const n8 = F4.groupFilesByUid(s7);
        this.uploadFiles(F4.filesForUpload(n8));
      }
      const a6 = () => {
        if (this.props.onAdd) {
          const n8 = {
            target: this,
            newState: s7,
            affectedFiles: t3
          };
          this.props.onAdd.call(void 0, n8);
        }
      };
      this.isControlled ? a6() : this.setState({ files: s7 }, a6);
    }, this.onUploadProgress = (i7, t3) => {
      const s7 = Math.round(100 * t3.loaded / (t3.total || 0)) || 0, a6 = this.fileStateCopy, n8 = a6.filter((l6) => l6.uid === i7);
      if (!n8.length)
        return;
      n8.forEach((l6) => {
        l6.progress = s7;
      });
      const o5 = () => {
        if (this.props.onProgress) {
          const l6 = {
            target: this,
            newState: a6,
            affectedFiles: n8
          };
          this.props.onProgress.call(void 0, l6);
        }
      };
      this.isControlled ? o5() : this.setState({ files: a6 }, o5);
    }, this.onUploadSuccess = (i7, t3) => {
      const s7 = this.fileStateCopy, a6 = s7.filter((o5) => o5.uid === i7);
      a6.forEach((o5) => {
        o5.status = n.Uploaded;
      }), delete this._httpSubscriptions[i7];
      const n8 = () => {
        if (this.props.onStatusChange) {
          const o5 = {
            target: this,
            newState: s7,
            affectedFiles: a6,
            response: t3 ? i6.convertAxiosResponse(t3) : void 0
          };
          this.props.onStatusChange.call(void 0, o5);
        }
      };
      this.isControlled ? n8() : this.setState({ files: s7 }, n8);
    }, this.onUploadError = (i7, t3) => {
      const s7 = this.fileStateCopy, a6 = s7.filter((o5) => o5.uid === i7);
      if (a6.forEach((o5) => {
        o5.status = n.UploadFailed;
      }), delete this._httpSubscriptions[i7], !a6.length)
        return;
      const n8 = () => {
        if (this.props.onStatusChange) {
          const o5 = {
            target: this,
            newState: s7,
            affectedFiles: a6,
            response: t3 ? i6.convertAxiosResponse(t3) : void 0
          };
          this.props.onStatusChange.call(void 0, o5);
        }
      };
      this.isControlled ? n8() : this.setState({ files: s7 }, n8);
    }, this.onRemove = (i7) => {
      const t3 = this.fileStateCopy, s7 = t3.filter((o5) => o5.uid === i7), a6 = t3.filter((o5) => o5.uid !== i7);
      if ([
        n.Uploaded,
        n.Initial,
        n.RemoveFailed
      ].indexOf(s7[0].status) > -1) {
        const o5 = {
          [i7]: s7
        };
        F4.setFilesStatus(o5, n.Removing), this.removeFiles(o5);
        const l6 = () => {
          if (this.props.onStatusChange) {
            const c5 = {
              target: this,
              newState: t3,
              affectedFiles: s7
            };
            this.props.onStatusChange.call(void 0, c5);
          }
        };
        this.isControlled ? l6() : this.setState({ files: t3 }, l6);
      } else {
        const o5 = () => {
          if (this.props.onRemove) {
            const l6 = {
              target: this,
              newState: a6,
              affectedFiles: s7
            };
            this.props.onRemove.call(void 0, l6);
          }
        };
        this.isControlled ? o5() : this.setState({ files: a6 }, o5);
      }
    }, this.onRemoveSuccess = (i7, t3) => {
      const s7 = this.fileStateCopy, a6 = s7.filter((l6) => l6.uid === i7), n8 = s7.filter((l6) => l6.uid !== i7), o5 = () => {
        if (this.props.onRemove) {
          const l6 = {
            target: this,
            newState: n8,
            affectedFiles: a6,
            response: t3 ? i6.convertAxiosResponse(t3) : void 0
          };
          this.props.onRemove.call(void 0, l6);
        }
      };
      this.isControlled ? o5() : this.setState({ files: n8 }, o5);
    }, this.onRemoveError = (i7, t3) => {
      const s7 = this.fileStateCopy, a6 = s7.filter((o5) => o5.uid === i7);
      a6.forEach((o5) => {
        o5.status = n.RemoveFailed;
      });
      const n8 = () => {
        if (this.props.onStatusChange) {
          const o5 = {
            target: this,
            newState: s7,
            affectedFiles: a6,
            response: t3 ? i6.convertAxiosResponse(t3) : void 0
          };
          this.props.onStatusChange.call(void 0, o5);
        }
      };
      this.isControlled ? n8() : this.setState({ files: s7 }, n8);
    }, this.onRetry = (i7) => {
      const t3 = this.fileStateCopy, s7 = F4.groupFilesByUid(t3.filter((n8) => n8.uid === i7));
      F4.setFilesStatus(s7, n.Uploading), this.uploadFiles(s7);
      const a6 = () => {
        if (this.props.onStatusChange) {
          const n8 = {
            target: this,
            newState: t3,
            affectedFiles: F4.flatFileGroup(s7)
          };
          this.props.onStatusChange.call(void 0, n8);
        }
      };
      this.isControlled ? a6() : this.setState({ files: t3 }, a6);
    }, this.onCancel = (i7) => {
      const t3 = this.fileStateCopy, s7 = t3.filter((o5) => o5.uid !== i7), a6 = t3.filter((o5) => o5.uid === i7);
      if (this._httpSubscriptions[i7] && (this._httpSubscriptions[i7].cancel(), delete this._httpSubscriptions[i7]), this.props.onCancel) {
        const o5 = {
          target: this,
          uid: i7
        };
        this.props.onCancel.call(void 0, o5);
      }
      const n8 = () => {
        if (this.props.onRemove) {
          const o5 = {
            target: this,
            newState: s7,
            affectedFiles: a6
          };
          this.props.onRemove.call(void 0, o5);
        }
      };
      this.isControlled ? n8() : this.setState({ files: s7 }, n8);
    }, this.onClear = () => {
      if (!this.files.length)
        return;
      Object.keys(this._httpSubscriptions).forEach((t3) => {
        this._httpSubscriptions[t3].cancel();
      }), this._httpSubscriptions = {};
      const i7 = () => {
        if (this.props.onRemove) {
          const t3 = {
            target: this,
            newState: [],
            affectedFiles: this.fileStateCopy
          };
          this.props.onRemove.call(void 0, t3);
        }
      };
      this.isControlled ? i7() : this.setState({ files: [] }, i7);
    }, l(e5), this.state = {
      files: v8.defaultFiles || []
    };
  }
  get async() {
    const {
      autoUpload: v8,
      batch: i7,
      removeField: t3,
      removeHeaders: s7,
      removeMethod: a6,
      removeUrl: n8,
      responseType: o5,
      saveField: l6,
      saveHeaders: c5,
      saveMethod: u5,
      saveUrl: d5,
      withCredentials: h5
    } = this.props;
    return {
      autoUpload: v8,
      batch: i7,
      removeField: t3,
      removeHeaders: s7,
      removeMethod: a6,
      removeUrl: n8,
      responseType: o5,
      saveField: l6,
      saveHeaders: c5,
      saveMethod: u5,
      saveUrl: d5,
      withCredentials: h5
    };
  }
  get files() {
    return (this.isControlled ? this.props.files : this.state.files) || [];
  }
  get isControlled() {
    return !this.props.defaultFiles;
  }
  get isCustomSave() {
    return this.props.saveUrl && typeof this.props.saveUrl == "function";
  }
  get isCustomRemove() {
    return this.props.removeUrl && typeof this.props.removeUrl == "function";
  }
  get fileStateCopy() {
    return this.isControlled ? F4.copyState(this.props.files) : F4.copyState(this.state.files);
  }
  /**
   * @hidden
   */
  get actionElement() {
    if (this._uploadNavigation)
      return this._uploadNavigation.actionElement;
  }
  /**
   * @hidden
   */
  render() {
    const {
      showFileList: v8,
      onAdd: i7,
      onRemove: t3,
      onCancel: s7,
      autoUpload: a6,
      showActionButtons: n8,
      actionsLayout: o5,
      tabIndex: l6,
      disabled: c5,
      ...u5
    } = this.props, d5 = F4.groupFilesByUid(this.files), h5 = F4.filesForUpload(d5);
    return S3.createElement(
      C,
      {
        groupedFiles: d5,
        className: this.props.className,
        showFileList: v8 && !!Object.keys(d5).length,
        showActionButtons: n8 && !a6 && !!Object.keys(h5).length,
        actionsLayout: o5,
        autoUpload: a6,
        disabled: c5,
        onAdd: this.onAdd,
        onRemove: this.onRemove,
        onClear: this.onClear,
        onUpload: this.onUpload,
        onRetry: this.onRetry,
        onCancel: this.onCancel,
        tabIndex: o2(l6, c5),
        ref: (U3) => this._uploadNavigation = U3,
        ...u5
      }
    );
  }
};
m6.defaultProps = {
  autoUpload: true,
  batch: false,
  removeField: "fileNames",
  removeHeaders: {},
  removeMethod: "POST",
  removeUrl: "",
  responseType: "json",
  saveField: "files",
  saveHeaders: {},
  saveMethod: "POST",
  saveUrl: "",
  withCredentials: true,
  restrictions: {
    allowedExtensions: [],
    maxFileSize: 0,
    minFileSize: 0
  },
  multiple: true,
  showFileList: true,
  showActionButtons: true,
  actionsLayout: "end",
  disabled: false
}, m6.propTypes = {
  autoUpload: import_prop_types.default.bool,
  batch: import_prop_types.default.bool,
  withCredentials: import_prop_types.default.bool,
  saveField: import_prop_types.default.string,
  saveHeaders: import_prop_types.default.object,
  saveMethod: import_prop_types.default.string,
  saveUrl: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  responseType: import_prop_types.default.oneOf(["arraybuffer", "blob", "json", "text"]),
  removeField: import_prop_types.default.string,
  removeHeaders: import_prop_types.default.object,
  removeMethod: import_prop_types.default.string,
  removeUrl: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  multiple: import_prop_types.default.bool,
  disabled: import_prop_types.default.bool,
  showFileList: import_prop_types.default.bool,
  showActionButtons: import_prop_types.default.bool,
  actionsLayout: import_prop_types.default.oneOf(["start", "center", "end", "stretched"]),
  tabIndex: import_prop_types.default.number,
  accept: import_prop_types.default.string,
  listItemUI: import_prop_types.default.oneOfType([
    import_prop_types.default.func,
    import_prop_types.default.string,
    import_prop_types.default.shape({ render: import_prop_types.default.func.isRequired })
  ]),
  restrictions: import_prop_types.default.shape({
    allowedExtensions: import_prop_types.default.arrayOf(import_prop_types.default.string),
    maxFileSize: import_prop_types.default.number,
    minFileSize: import_prop_types.default.number
  }),
  files: import_prop_types.default.arrayOf(import_prop_types.default.shape({
    uid: import_prop_types.default.string,
    name: import_prop_types.default.string,
    extension: import_prop_types.default.string,
    size: import_prop_types.default.number,
    validationErrors: import_prop_types.default.arrayOf(import_prop_types.default.string),
    status: import_prop_types.default.oneOf([
      n.Initial,
      n.RemoveFailed,
      n.Removing,
      n.Selected,
      n.UploadFailed,
      n.Uploaded,
      n.Uploading
    ]),
    progress: import_prop_types.default.number,
    getRawFile: import_prop_types.default.func
  })),
  defaultFiles: import_prop_types.default.arrayOf(import_prop_types.default.shape({
    uid: import_prop_types.default.string,
    name: import_prop_types.default.string,
    extension: import_prop_types.default.string,
    size: import_prop_types.default.number,
    validationErrors: import_prop_types.default.arrayOf(import_prop_types.default.string),
    status: import_prop_types.default.oneOf([
      n.Initial,
      n.RemoveFailed,
      n.Removing,
      n.Selected,
      n.UploadFailed,
      n.Uploaded,
      n.Uploading
    ]),
    progress: import_prop_types.default.number,
    getRawFile: import_prop_types.default.func
  }))
};
var C2 = m6;

// node_modules/@progress/kendo-react-upload/ExternalDropZone.mjs
var e7 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);
var x4 = 100;
var R3 = e7.forwardRef((n8, k2) => {
  l(e5);
  const f5 = e7.useRef(null), o5 = e7.useRef(null);
  let s7 = e7.useRef(null), i7 = e7.useRef(false), c5 = e7.useRef(null);
  const { uploadRef: r6 } = n8, d5 = r6.current;
  let [I, E4] = e7.useState(false);
  const g3 = e7.useMemo(() => new c("en"), []), u5 = a(), N3 = u5.toLanguageString(m, y[m]), [O, z3] = e7.useState(
    u5.toLanguageString(N, y[N])
  ), h5 = n8.customHint || e7.createElement("span", null, N3), T = n8.customNote || e7.createElement("span", null, O), y3 = e7.useCallback(
    () => {
      o5.current && o5.current.focus();
    },
    [o5]
  );
  e7.useImperativeHandle(f5, () => ({
    element: o5.current,
    focus: y3,
    props: n8
  })), e7.useImperativeHandle(k2, () => f5.current), e7.useEffect(
    () => {
      if (d5) {
        const t3 = d5.props.restrictions.allowedExtensions;
        if (t3 && t3.length) {
          const l6 = g3.format(
            u5.toLanguageString(g, y[g]),
            [
              t3
            ]
          );
          z3(l6);
        }
      }
    },
    [d5, u5, g3]
  );
  const D = e7.useCallback(
    (t3) => (/* @__PURE__ */ new Date()).getTime() - (t3 || /* @__PURE__ */ new Date()).getTime() > x4,
    []
  ), Z = e7.useCallback(
    (t3) => {
      t3.preventDefault();
      let l6 = t3.dataTransfer.files;
      l6.length > 0 && !n8.disabled && r6 && r6.current && (r6.current.onAdd && (t3.preventDefault(), r6.current.onAdd(l6)), n8.onDrop && n8.onDrop.call(void 0, t3));
    },
    [n8.disabled, r6, n8.onDrop]
  ), w = e7.useCallback(
    (t3) => {
      if (i7) {
        i7.current = true;
        const l6 = () => {
          D(c5.current) && (E4(false), i7.current = false, clearInterval(s7.current), s7.current = null, c5.current = null);
        };
        s7.current = setInterval(l6, x4);
      }
      n8.onElementDragEnter && n8.onElementDragEnter.call(void 0, t3);
    },
    [i7, s7, c5, D, n8.onElementDragEnter]
  ), C3 = e7.useCallback(
    (t3) => {
      t3.preventDefault(), c5.current = /* @__PURE__ */ new Date(), E4(true), n8.onElementDragOver && n8.onElementDragOver.call(void 0, t3);
    },
    [c5, n8.onElementDragOver]
  );
  return e7.createElement(
    "div",
    {
      ref: o5,
      id: n8.id,
      className: o(
        "k-external-dropzone",
        {
          "k-external-dropzone-hover": I,
          "k-disabled": n8.disabled
        },
        n8.className
      ),
      tabIndex: o2(n8.tabIndex, n8.disabled, void 0),
      onDrop: Z,
      onDragEnter: w,
      onDragOver: C3
    },
    e7.createElement(
      "div",
      {
        style: n8.style,
        className: "k-dropzone-inner"
      },
      e7.createElement(v, { name: "upload", icon: uploadIcon, className: "k-dropzone-icon", size: "xxxlarge" }),
      e7.createElement("span", { className: "k-dropzone-hint" }, h5),
      e7.createElement("span", { className: "k-dropzone-note" }, T)
    )
  );
});
var W = {
  id: import_prop_types2.default.string,
  tabIndex: import_prop_types2.default.number,
  editorRef: import_prop_types2.default.oneOfType([
    import_prop_types2.default.func,
    import_prop_types2.default.shape({ current: import_prop_types2.default.any })
  ]),
  disabled: import_prop_types2.default.bool,
  onDrop: import_prop_types2.default.func,
  onElementDragEnter: import_prop_types2.default.func,
  onElementDragOver: import_prop_types2.default.func
};
R3.displayName = "KendoReactExternalDropZone";
R3.propTypes = W;
export {
  R3 as ExternalDropZone,
  C2 as Upload,
  b as UploadActionButtons,
  _ as UploadAddButton,
  A2 as UploadDropZone,
  n as UploadFileStatus,
  E2 as UploadInput,
  u2 as UploadList,
  F3 as UploadListActionButton,
  N2 as UploadListGroup,
  z2 as UploadListMultiItem,
  M as UploadListSingleItem,
  v6 as UploadStatus,
  f3 as UploadUI,
  t as headerStatusUploaded,
  a2 as headerStatusUploading,
  i2 as invalidMaxFileSize,
  y as uploadMessages,
  u as uploadSelect,
  v5 as uploadUtils
};
/*! Bundled license information:

@progress/kendo-react-upload/interfaces/UploadFileStatus.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/messages/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/utils/utils.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadListActionButton.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadListSingleItem.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadListMultiItem.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadListGroup.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadList.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadInput.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadAddButton.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadActionButtons.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadStatus.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadDropZone.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadUI.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/UploadNavigation.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/utils/stateUtils.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/utils/connectionUtils.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/utils/validationUtils.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/package-metadata.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/Upload.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/ExternalDropZone.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-upload/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)
*/
//# sourceMappingURL=@progress_kendo-react-upload.js.map
