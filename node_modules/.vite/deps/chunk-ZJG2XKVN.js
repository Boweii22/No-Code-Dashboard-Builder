import {
  a2
} from "./chunk-JRA7E26J.js";
import {
  v as v2
} from "./chunk-FVVK3HUS.js";
import {
  windowIcon,
  windowMinimizeIcon,
  windowRestoreIcon,
  xIcon
} from "./chunk-ILHBWX6Z.js";
import {
  a3 as a,
  c4 as c,
  e,
  e2,
  l4 as l,
  m,
  m2,
  n3 as n,
  n5 as n2,
  o,
  require_prop_types,
  t,
  v,
  x2 as x
} from "./chunk-IBO4PJA7.js";
import {
  require_react_dom
} from "./chunk-PJEEZAML.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@progress/kendo-react-dialogs/Dialog.mjs
var o4 = __toESM(require_react(), 1);
var b = __toESM(require_react_dom(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-dialogs/DialogTitleBar.mjs
var t2 = __toESM(require_react(), 1);
var s = ({ children: e7, onCloseButtonClick: a4, id: i6, closeIcon: l2 }) => t2.createElement("div", { className: "k-window-titlebar k-dialog-titlebar", id: i6 }, t2.createElement("span", { className: "k-window-title k-dialog-title" }, e7), t2.createElement("div", { className: "k-window-titlebar-actions k-dialog-titlebar-actions" }, l2 && t2.createElement(
  v2,
  {
    role: "button",
    "aria-label": "Close",
    onClick: a4,
    icon: "x",
    svgIcon: xIcon,
    fillMode: "flat",
    className: "k-window-titlebar-action k-dialog-titlebar-action"
  }
)));

// node_modules/@progress/kendo-react-dialogs/DialogActionsBar.mjs
var n3 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
var i = (e7) => {
  const s3 = {
    layout: "stretched",
    ...e7
  }, { layout: o8, children: a4 } = s3, r2 = o(
    "k-actions",
    "k-actions-horizontal",
    "k-window-actions k-dialog-actions",
    {
      [`k-actions-${o8}`]: o8
    }
  );
  return n3.createElement("div", { className: r2 }, a4);
};
i.propTypes = {
  children: import_prop_types.default.any,
  layout: import_prop_types.default.oneOf(["start", "center", "end", "stretched"])
};

// node_modules/@progress/kendo-react-dialogs/package-metadata.mjs
var e3 = {
  name: "@progress/kendo-react-dialogs",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1712846564,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/components/my-license/"
};

// node_modules/@progress/kendo-react-dialogs/constants.mjs
var o2 = "data-windowid";
var D = 10002;
var n4 = 2;
var t4 = ".k-window:not(.k-dialog), .k-dialog-wrapper";

// node_modules/@progress/kendo-react-dialogs/utils.mjs
var o3 = (i6, t6, n9) => {
  let e7 = i6;
  if (t6 && t6.defaultView) {
    let x2 = t6.querySelectorAll(t4), l2 = false;
    return x2.forEach((d) => {
      let a4 = t6.defaultView.getComputedStyle(d, null);
      if (d.getAttribute(o2) !== n9 && a4.zIndex !== null) {
        let I2 = parseInt(a4.zIndex, 10);
        I2 >= e7 && (e7 = I2, l2 = true);
      }
    }), l2 ? e7 + n4 : e7;
  }
  return e7;
};

// node_modules/@progress/kendo-react-dialogs/Dialog.mjs
var i2 = class i3 extends o4.Component {
  constructor(s3) {
    super(s3), this.context = 0, this.titleId = this.generateTitleId(), this.contentId = this.generateContentId(), this.showLicenseWatermark = false, this.onCloseDialog = (t6) => {
      t6.preventDefault(), c(this.props.onClose, t6, this, void 0);
    }, this.onKeyDown = (t6) => {
      t6.keyCode === e2.esc && this.props.onClose && (t6.preventDefault(), this.onCloseDialog(t6)), n(t6, this.element);
    }, this.getCurrentZIndex = () => !this.state || this.context === void 0 ? this.context ? this.context : D : this.state.zIndex > (this.context ? this.context + n4 : 0) ? this.state.zIndex : this.context + n4, this.getDocument = () => this.props.appendTo ? this.props.appendTo.ownerDocument : document, l(e3), this.showLicenseWatermark = n2(e3);
  }
  get _id() {
    return this.props.id + "-accessibility-id";
  }
  /**
   * @hidden
   */
  componentDidMount() {
    this.element && (this.props.autoFocus && this.element.focus(), this.setState({
      zIndex: o3(this.getCurrentZIndex(), this.getDocument(), this._id)
    }));
  }
  /**
   * @hidden
   */
  render() {
    const s3 = this.props.id !== void 0 ? this.props.id : this.titleId, { title: t6, width: m4, height: u2, children: g, minWidth: I2, dir: y, style: f, contentStyle: D2 } = this.props, r2 = o4.Children.toArray(g), x2 = this.getContent(r2), C = this.getActionBar(r2), w2 = t6 ? {
      "aria-labelledby": s3
    } : null, k = this.props.closeIcon !== void 0 ? this.props.closeIcon : true, a4 = this.getCurrentZIndex(), l2 = o4.createElement(t.Provider, { value: a4 }, o4.createElement(
      "div",
      {
        [o2]: this._id,
        className: "k-dialog-wrapper" + (this.props.className ? " " + this.props.className : ""),
        onKeyDown: this.onKeyDown,
        tabIndex: 0,
        dir: y,
        style: {
          zIndex: a4,
          ...f
        },
        ref: (T) => this.element = T
      },
      o4.createElement("div", { className: "k-overlay" }),
      o4.createElement(
        "div",
        {
          ...w2,
          className: o(
            "k-window k-dialog",
            {
              [`k-window-${this.props.themeColor}`]: this.props.themeColor
            }
          ),
          role: "dialog",
          "aria-labelledby": s3,
          "aria-modal": true,
          "aria-describedby": this.contentId,
          style: { width: m4, height: u2, minWidth: I2 }
        },
        this.props.title && o4.createElement(
          s,
          {
            closeIcon: k,
            onCloseButtonClick: this.onCloseDialog,
            id: s3
          },
          t6
        ),
        o4.createElement("div", { className: "k-window-content k-dialog-content", style: D2, id: this.contentId }, x2),
        C,
        this.showLicenseWatermark && o4.createElement(v, null)
      )
    ));
    return e ? this.props.appendTo !== null ? b.createPortal(l2, this.props.appendTo || document.body) : l2 : null;
  }
  getActionBar(s3) {
    return s3.filter((t6) => t6 && t6.type === i);
  }
  getContent(s3) {
    return s3.filter((t6) => t6 && t6.type !== i);
  }
  generateTitleId() {
    return "dialog-title-" + this._id;
  }
  generateContentId() {
    return "dialog-content-" + this._id;
  }
};
i2.displayName = "Dialog", i2.propTypes = {
  title: import_prop_types2.default.any,
  id: import_prop_types2.default.string,
  dir: import_prop_types2.default.string,
  style: import_prop_types2.default.object,
  closeIcon: import_prop_types2.default.bool,
  width: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  height: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  minWidth: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  autoFocus: import_prop_types2.default.bool
}, i2.defaultProps = {
  autoFocus: false
}, i2.contextType = t;
var n5 = i2;
var G = a();
var R = m(x(G, n5));
R.displayName = "KendoReactDialog";

// node_modules/@progress/kendo-react-dialogs/Window.mjs
var h = __toESM(require_react(), 1);
var R2 = __toESM(require_react_dom(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-dialogs/WindowTitlebar.mjs
var e5 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-dialogs/StageEnum.mjs
var I = ((E2) => (E2.DEFAULT = "DEFAULT", E2.FULLSCREEN = "FULLSCREEN", E2.MINIMIZED = "MINIMIZED", E2))(I || {});

// node_modules/@progress/kendo-react-dialogs/messages/index.mjs
var o5 = "dialogs.windowMaximizeButton";
var i4 = "dialogs.windowMinimizeButton";
var t5 = "dialogs.windowRestoreButton";
var n6 = "dialogs.windowCloseButton";
var s2 = {
  [o5]: "maximize",
  [i4]: "minimize",
  [t5]: "restore",
  [n6]: "close"
};

// node_modules/@progress/kendo-react-dialogs/WindowTitlebar.mjs
var v3 = (t6) => {
  const {
    children: o8,
    onCloseButtonClick: r2,
    onMinimizeButtonClick: m4,
    onFullScreenButtonClick: s3,
    onRestoreButtonClick: d,
    onDoubleClick: f,
    stage: n9,
    forwardedRef: k,
    id: C
  } = t6, i6 = a2(), E2 = t6.minimizeButton ? e5.createElement(t6.minimizeButton, { onClick: m4, stage: n9 }) : e5.createElement(
    v2,
    {
      fillMode: "flat",
      icon: "window-minimize",
      svgIcon: windowMinimizeIcon,
      className: "k-window-titlebar-action",
      onClick: m4,
      "aria-label": i6.toLanguageString(i4, s2[i4])
    }
  ), z = t6.maximizeButton ? e5.createElement(t6.maximizeButton, { onClick: s3, stage: n9 }) : e5.createElement(
    v2,
    {
      fillMode: "flat",
      icon: "window-maximize",
      svgIcon: windowIcon,
      className: "k-window-titlebar-action",
      onClick: s3,
      "aria-label": i6.toLanguageString(o5, s2[o5])
    }
  ), b2 = t6.restoreButton ? e5.createElement(t6.restoreButton, { onClick: d, stage: n9 }) : e5.createElement(
    v2,
    {
      fillMode: "flat",
      icon: "window-restore",
      svgIcon: windowRestoreIcon,
      className: "k-window-titlebar-action",
      onClick: d,
      "aria-label": i6.toLanguageString(t5, s2[t5])
    }
  ), R3 = t6.closeButton ? e5.createElement(t6.closeButton, { onClick: r2, stage: n9 }) : e5.createElement(
    v2,
    {
      fillMode: "flat",
      icon: "x",
      svgIcon: xIcon,
      className: "k-window-titlebar-action",
      onClick: r2,
      "aria-label": i6.toLanguageString(n6, s2[n6])
    }
  );
  return e5.createElement(
    "div",
    {
      className: "k-window-titlebar",
      style: { touchAction: "none" },
      ref: k,
      onDoubleClick: f
    },
    e5.createElement("span", { className: "k-window-title", id: C }, o8 || ""),
    e5.createElement("div", { className: "k-window-titlebar-actions" }, n9 === I.DEFAULT && E2, n9 === I.DEFAULT && z, n9 !== I.DEFAULT && b2, R3)
  );
};
var F = e5.forwardRef((t6, o8) => e5.createElement(
  v3,
  {
    ...t6,
    forwardedRef: o8
  }
));

// node_modules/@progress/kendo-react-dialogs/WindowResizeHandlers.mjs
var n7 = __toESM(require_react(), 1);
var o6 = ["n", "e", "s", "w", "se", "sw", "ne", "nw"];
var c2 = class extends n7.Component {
  render() {
    return n7.createElement("div", { className: "k-resize-handles-wrapper" }, " ", o6.map((t6, r2) => n7.createElement(
      m2,
      {
        key: r2,
        onDrag: (s3) => {
          const { event: e7 } = s3;
          e7.originalEvent.preventDefault(), this.props.onResize(e7, { end: false, direction: t6 });
        },
        onRelease: (s3) => {
          const { event: e7 } = s3;
          e7.originalEvent.preventDefault(), this.props.onResize(e7, { end: true, direction: t6 });
        }
      },
      n7.createElement(
        "div",
        {
          className: "k-resize-handle k-resize-" + t6,
          style: { display: "block", touchAction: "none" }
        }
      )
    )));
  }
};

// node_modules/@progress/kendo-react-dialogs/MiddleLayerOptimization.mjs
var r = __toESM(require_react(), 1);
var n8 = class extends r.Component {
  shouldComponentUpdate(e7) {
    return e7.shouldUpdateOnDrag || !e7.isDragging;
  }
  render() {
    return this.props.children;
  }
};

// node_modules/@progress/kendo-react-dialogs/WindowActionsBar.mjs
var c3 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);
var i5 = (n9) => {
  const s3 = {
    layout: "end",
    ...n9
  }, { layout: t6, children: o8 } = s3, r2 = o(
    "k-actions",
    "k-window-actions",
    "k-actions-horizontal",
    "k-hstack",
    {
      "k-justify-content-start": t6 === "start",
      "k-justify-content-center": t6 === "center",
      "k-justify-content-end": t6 === "end",
      "k-justify-content-stretch": t6 === "stretched"
    }
  );
  return c3.createElement("div", { className: r2 }, o8);
};
i5.propTypes = {
  children: import_prop_types3.default.any,
  layout: import_prop_types3.default.oneOf(["start", "center", "end", "stretched"])
};

// node_modules/@progress/kendo-react-dialogs/Window.mjs
var w = 300;
var u = 300;
var m3 = 120;
var S = 100;
var a3 = 5;
var c4 = class c5 extends h.Component {
  constructor(s3) {
    super(s3), this.context = 0, this.draggable = null, this.offSetCoordinates = { x: 0, y: 0 }, this.titleId = this.generateTitleId(), this.mounted = false, this.showLicenseWatermark = false, this.onKeyDown = (t6) => {
      if (t6.target !== t6.currentTarget)
        return;
      const e7 = this.props.minWidth || m3, n9 = this.props.minHeight || S;
      if (t6.ctrlKey && this.props.resizable) {
        switch (t6.keyCode) {
          case e2.up:
            t6.preventDefault(), n9 <= this.height - a3 && this.setState({ height: this.height - a3 });
            break;
          case e2.down:
            t6.preventDefault(), this.setState({ height: this.height + a3 });
            break;
          case e2.left:
            e7 <= this.width - a3 && this.setState({ width: this.width - a3 });
            break;
          case e2.right:
            this.setState({ width: this.width + a3 });
            break;
          default:
            return;
        }
        this.dispatchMoveEvent(this.props.onResize, t6, false, void 0);
        return;
      }
      if (t6.altKey) {
        switch (t6.keyCode) {
          case e2.up:
            this.windowStage === I.MINIMIZED ? (this.handleRestore(t6), c(this.props.onStageChange, t6, this, { state: I.DEFAULT })) : this.windowStage === I.DEFAULT && (this.handleFullscreen(t6), c(this.props.onStageChange, t6, this, { state: I.FULLSCREEN }));
            break;
          case e2.down:
            this.windowStage === I.FULLSCREEN ? (this.handleRestore(t6), c(this.props.onStageChange, t6, this, { state: I.DEFAULT })) : this.windowStage === I.DEFAULT && (this.handleMinimize(t6), c(this.props.onStageChange, t6, this, { state: I.MINIMIZED }));
            break;
        }
        return;
      }
      if (!t6.ctrlKey)
        switch (t6.keyCode) {
          case e2.esc:
            this.props.onClose && this.handleCloseWindow(t6);
            return;
          case e2.up:
            this.setState({ top: this.state.top - a3 });
            break;
          case e2.down:
            this.setState({ top: this.state.top + a3 });
            break;
          case e2.left:
            this.setState({ left: this.state.left - a3 });
            break;
          case e2.right:
            this.setState({ left: this.state.left + a3 });
            break;
          default:
            return;
        }
      this.dispatchMoveEvent(this.props.onMove, t6, false, void 0);
    }, this.onPress = (t6) => {
      const e7 = t6.event;
      this.windowCoordinatesState.differenceLeft = e7.pageX - this.left, this.windowCoordinatesState.differenceTop = e7.pageY - this.top;
    }, this.onDrag = (t6) => {
      const e7 = t6.event;
      e7.originalEvent.preventDefault(), this.windowStage !== I.FULLSCREEN && this.props.draggable && (this.setState({
        top: Math.max(e7.pageY - this.windowCoordinatesState.differenceTop, 0),
        left: e7.pageX - this.windowCoordinatesState.differenceLeft,
        isDragging: true
      }), this.props.onMove && this.dispatchMoveEvent(this.props.onMove, e7, true, false));
    }, this.onRelease = (t6) => {
      const e7 = t6.event;
      this.windowStage !== I.FULLSCREEN && this.props.draggable && this.props.onMove && this.dispatchMoveEvent(this.props.onMove, e7, true, true), this.setState({
        isDragging: false
      });
    }, this.onFocus = () => {
      this._blurTimeout ? (clearTimeout(this._blurTimeout), this._blurTimeout = void 0) : this.setState({
        focused: true,
        zIndex: o3(this.getCurrentZIndex(), this.getDocument(), this._id)
      });
    }, this.onBlur = () => {
      clearTimeout(this._blurTimeout);
      const t6 = this.getWindow();
      t6 && (this._blurTimeout = t6.setTimeout(() => {
        this.mounted && this.setState({ focused: false }), this._blurTimeout = void 0;
      }));
    }, this.getInitialTop = () => {
      if (this.props.top !== void 0)
        return this.props.top;
      if (this.props.initialTop !== void 0)
        return this.props.initialTop;
      let t6 = u;
      if (this.props.height !== void 0 ? t6 = this.props.height : this.props.initialHeight !== void 0 && (t6 = this.props.initialHeight), this.props.appendTo)
        return this.props.appendTo.offsetHeight / 2 - t6 / 2;
      const e7 = this.getWindow();
      return e7 ? e7.innerHeight / 2 - t6 / 2 : 0;
    }, this.getInitialLeft = () => {
      if (this.props.left !== void 0)
        return this.props.left;
      if (this.props.initialLeft !== void 0)
        return this.props.initialLeft;
      let t6 = w;
      if (this.props.width !== void 0 ? t6 = this.props.width : this.props.initialWidth !== void 0 && (t6 = this.props.initialWidth), this.props.appendTo)
        return this.props.appendTo.offsetWidth / 2 - t6 / 2;
      const e7 = this.getWindow();
      return e7 ? e7.innerWidth / 2 - t6 / 2 : 0;
    }, this.getInitialWidth = () => {
      let t6 = w;
      return this.props.width !== void 0 ? t6 = this.props.width : this.props.initialWidth !== void 0 && (t6 = this.props.initialWidth), t6;
    }, this.getInitialHeight = () => {
      let t6 = u;
      return this.props.height !== void 0 ? t6 = this.props.height : this.props.initialHeight !== void 0 && (t6 = this.props.initialHeight), t6;
    }, this.handleMinimize = (t6) => {
      t6.preventDefault(), this.windowCoordinatesState.leftBeforeAction = this.left, this.windowCoordinatesState.topBeforeAction = this.top, this.windowCoordinatesState.widthBeforeAction = this.width, this.windowCoordinatesState.heightBeforeAction = this.height, this.setState({
        stage: I.MINIMIZED,
        height: 0
      }), c(this.props.onStageChange, t6, this, { state: I.MINIMIZED });
    }, this.handleFullscreen = (t6) => {
      t6.preventDefault(), this.windowCoordinatesState.leftBeforeAction = this.left, this.windowCoordinatesState.topBeforeAction = this.top, this.windowCoordinatesState.widthBeforeAction = this.width, this.windowCoordinatesState.heightBeforeAction = this.height;
      const e7 = this.getWindow(), n9 = e7 ? e7.innerWidth : 0, d = e7 ? e7.innerHeight : 0;
      this.setState({
        left: 0,
        top: 0,
        width: this.props.appendTo ? this.props.appendTo.offsetWidth : n9,
        height: this.props.appendTo ? this.props.appendTo.offsetHeight : d,
        stage: I.FULLSCREEN
      }), c(this.props.onStageChange, t6, this, { state: I.FULLSCREEN });
    }, this.handleRestore = (t6) => {
      t6.preventDefault(), this.windowStage === I.FULLSCREEN ? this.setState({
        stage: I.DEFAULT,
        left: this.windowCoordinatesState.leftBeforeAction,
        top: this.windowCoordinatesState.topBeforeAction,
        width: this.windowCoordinatesState.widthBeforeAction,
        height: this.windowCoordinatesState.heightBeforeAction
      }) : this.windowStage === I.MINIMIZED && this.setState({
        stage: I.DEFAULT,
        height: this.windowCoordinatesState.heightBeforeAction
      }), c(this.props.onStageChange, t6, this, { state: I.DEFAULT });
    }, this.handleCloseWindow = (t6) => {
      t6.preventDefault(), c(this.props.onClose, t6, this, { state: void 0 });
    }, this.handleDoubleClick = (t6) => {
      this.windowStage === I.FULLSCREEN || this.windowStage === I.MINIMIZED ? this.handleRestore(t6) : this.handleFullscreen(t6);
    }, this.handleResize = (t6, e7) => {
      const n9 = this.props.appendTo ? t6.pageX - this.offSetCoordinates.x : t6.pageX, d = this.props.appendTo ? t6.pageY - this.offSetCoordinates.y : t6.pageY, f = this.width, l2 = this.height, C = this.props.minWidth || m3, D2 = this.props.minHeight || S, I2 = this.top - d, T = this.left - n9;
      let L = n9 - this.left, b2 = d - this.top;
      const g = Object.assign({}, this.state, { isDragging: !e7.end });
      e7.direction.indexOf("n") >= 0 && D2 - (l2 + I2) < 0 && (this.top > 0 && (g.height = l2 + I2), g.top = d), e7.direction.indexOf("s") >= 0 && D2 - b2 < 0 && (g.height = b2), e7.direction.indexOf("w") >= 0 && C - (f + T) < 0 && (this.left > 0 && (g.width = f + T), g.left = n9), e7.direction.indexOf("e") >= 0 && C - L < 0 && (g.width = L), this.setState(g), this.dispatchMoveEvent(this.props.onResize, t6, true, e7.end);
    }, this.dispatchMoveEvent = (t6, e7, n9, d) => {
      t6 && t6.call(void 0, {
        nativeEvent: e7.nativeEvent ? e7.nativeEvent : e7.originalEvent,
        drag: n9,
        end: d,
        target: this,
        left: this.state.left,
        top: this.state.top,
        width: this.state.width,
        hight: this.state.height,
        height: this.state.height
      });
    }, this.handleBrowserWindowResize = () => {
      if (this.windowStage === I.FULLSCREEN) {
        const t6 = this.getWindow(), e7 = t6 ? t6.innerWidth : 0, n9 = t6 ? t6.innerHeight : 0;
        this.setState({
          width: this.props.appendTo ? this.props.appendTo.offsetWidth : e7,
          height: this.props.appendTo ? this.props.appendTo.offsetHeight : n9
        });
      }
    }, this.getCurrentZIndex = () => !this.state || this.context === void 0 ? this.context ? this.context : D : this.state.zIndex > (this.context ? this.context + n4 : 0) ? this.state.zIndex : this.context + n4, this.getDocument = () => this.props.appendTo ? this.props.appendTo.ownerDocument : document, this.getWindow = () => {
      const t6 = this.getDocument();
      return t6 && t6.defaultView;
    }, l(e3), this.showLicenseWatermark = n2(e3), this.state = {
      stage: this.props.stage || I.DEFAULT,
      isDragging: false,
      top: 0,
      left: 0,
      width: w,
      height: u,
      focused: true,
      zIndex: D
    };
  }
  get _id() {
    return this.props.id + "-accessibility-id";
  }
  /**
   * @hidden
   */
  componentDidMount() {
    const s3 = this.getWindow();
    s3 && s3.addEventListener("resize", this.handleBrowserWindowResize), this.setState({
      stage: this.props.stage || I.DEFAULT,
      isDragging: false,
      top: this.getInitialTop(),
      left: this.getInitialLeft(),
      width: this.getInitialWidth(),
      height: this.getInitialHeight(),
      focused: true,
      zIndex: o3(this.getCurrentZIndex(), this.getDocument(), this._id)
    }), this.windowCoordinatesState = {
      leftBeforeAction: this.getInitialLeft(),
      topBeforeAction: this.getInitialTop(),
      widthBeforeAction: this.getInitialWidth(),
      heightBeforeAction: this.getInitialHeight()
    };
    const t6 = this.getDocument();
    if (this.props.appendTo && t6) {
      let e7 = this.props.appendTo.getBoundingClientRect(), n9 = t6.body.getBoundingClientRect();
      this.offSetCoordinates.x = e7.left - n9.left, this.offSetCoordinates.y = e7.top - n9.top;
    }
    this.mounted = true;
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    const s3 = this.getWindow();
    s3 && s3.removeEventListener("resize", this.handleBrowserWindowResize), this.mounted = false;
  }
  /**
   * @hidden
   */
  componentDidUpdate() {
    const s3 = this.getDocument();
    if (this.props.appendTo && s3) {
      let t6 = this.props.appendTo.getBoundingClientRect(), e7 = s3.body.getBoundingClientRect();
      this.offSetCoordinates.x = t6.left - e7.left, this.offSetCoordinates.y = t6.top - e7.top;
    }
    this.mounted = true;
  }
  /**
   * @hidden
   */
  render() {
    const s3 = h.Children.toArray(this.props.children), t6 = this.getContent(s3), e7 = this.getActionBar(s3), n9 = this.getCurrentZIndex(), d = o(
      "k-window",
      this.props.className,
      {
        [`k-window-${this.props.themeColor}`]: this.props.themeColor,
        "k-window-minimized": this.state.stage === "MINIMIZED",
        "k-window-focused": this.state.focused
      }
    ), f = h.createElement(t.Provider, { value: n9 }, h.createElement(h.Fragment, null, this.props.modal && h.createElement(
      "div",
      {
        className: "k-overlay",
        style: {
          zIndex: n9,
          ...this.props.overlayStyle
        }
      }
    ), h.createElement(
      "div",
      {
        id: this.props.id,
        [o2]: this._id,
        tabIndex: 0,
        role: "dialog",
        "aria-labelledby": this.titleId,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onKeyDown: this.onKeyDown,
        ref: (l2) => {
          this.windowElement = l2, this.element = l2;
        },
        className: d,
        style: {
          top: this.top,
          left: this.left,
          width: this.width,
          height: this.height || "",
          zIndex: n9,
          ...this.props.style
        }
      },
      h.createElement(
        n8,
        {
          shouldUpdateOnDrag: this.props.shouldUpdateOnDrag || false,
          isDragging: this.state.isDragging
        },
        h.createElement(
          m2,
          {
            onPress: this.onPress,
            onDrag: this.onDrag,
            onRelease: this.onRelease,
            ref: (l2) => this.draggable = l2
          },
          h.createElement(
            F,
            {
              stage: this.windowStage,
              onDoubleClick: this.props.doubleClickStageChange ? this.handleDoubleClick : void 0,
              onMinimizeButtonClick: this.handleMinimize,
              onFullScreenButtonClick: this.handleFullscreen,
              onRestoreButtonClick: this.handleRestore,
              onCloseButtonClick: this.handleCloseWindow,
              closeButton: this.props.closeButton,
              minimizeButton: this.props.minimizeButton,
              maximizeButton: this.props.maximizeButton,
              restoreButton: this.props.restoreButton,
              id: this.titleId
            },
            this.props.title
          )
        ),
        this.windowStage !== I.MINIMIZED ? h.createElement(h.Fragment, null, h.createElement("div", { className: "k-window-content" }, t6), e7) : null,
        this.windowStage === I.DEFAULT && this.props.resizable ? h.createElement(c2, { onResize: this.handleResize }) : null
      ),
      this.showLicenseWatermark && h.createElement(v, null)
    )));
    return e ? this.props.appendTo !== null ? R2.createPortal(f, this.props.appendTo || document.body) : f : null;
  }
  // Getters
  get top() {
    return this.windowStage !== I.FULLSCREEN ? Math.max(this.props.top || this.state.top, 0) : 0;
  }
  get left() {
    return this.windowStage !== I.FULLSCREEN ? Math.max(this.props.left || this.state.left, 0) : 0;
  }
  get width() {
    let s3 = this.props.width || this.state.width;
    if (this.windowStage === I.FULLSCREEN) {
      if (this.props.appendTo)
        return s3 = this.props.appendTo.offsetWidth, s3;
      const t6 = this.getWindow();
      s3 = t6 ? t6.innerWidth : 0;
    }
    return s3;
  }
  get height() {
    let s3 = this.props.height || this.state.height;
    if (this.windowStage === I.FULLSCREEN) {
      if (this.props.appendTo)
        return s3 = this.props.appendTo.offsetHeight, s3;
      const t6 = this.getWindow();
      s3 = t6 ? t6.innerHeight : 0;
    } else
      this.windowStage === I.MINIMIZED && (s3 = 0);
    return s3;
  }
  get windowStage() {
    return this.props.stage || this.state.stage;
  }
  getActionBar(s3) {
    return s3.filter((t6) => t6 && t6.type === i5);
  }
  getContent(s3) {
    return s3.filter((t6) => t6 && t6.type !== i5);
  }
  generateTitleId() {
    return "window-title-" + this._id;
  }
};
c4.displayName = "Window", c4.propTypes = {
  width: import_prop_types4.default.number,
  height: import_prop_types4.default.number,
  left: import_prop_types4.default.number,
  top: import_prop_types4.default.number,
  initialWidth: import_prop_types4.default.number,
  initialHeight: import_prop_types4.default.number,
  initialLeft: import_prop_types4.default.number,
  initialTop: import_prop_types4.default.number,
  minWidth: import_prop_types4.default.number,
  minHeight: import_prop_types4.default.number,
  resizable: import_prop_types4.default.bool,
  draggable: import_prop_types4.default.bool,
  title: import_prop_types4.default.any,
  shouldUpdateOnDrag: import_prop_types4.default.bool,
  stage: import_prop_types4.default.oneOf(["DEFAULT", "MINIMIZED", "FULLSCREEN"]),
  className: import_prop_types4.default.string,
  id: import_prop_types4.default.string,
  style: import_prop_types4.default.object,
  overlayStyle: import_prop_types4.default.object
}, c4.defaultProps = {
  minWidth: m3,
  minHeight: S,
  resizable: true,
  draggable: true,
  modal: false,
  doubleClickStageChange: true
}, c4.contextType = t;
var E = c4;
var G2 = a();
var Y = m(x(G2, E));
Y.displayName = "KendoReactWindow";

export {
  i,
  G,
  R,
  i5 as i2,
  G2,
  Y
};
/*! Bundled license information:

@progress/kendo-react-dialogs/DialogTitleBar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/DialogActionsBar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/package-metadata.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/constants.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/utils.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/Dialog.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/StageEnum.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/messages/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/WindowTitlebar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/WindowResizeHandlers.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/MiddleLayerOptimization.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/WindowActionsBar.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/Window.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)

@progress/kendo-react-dialogs/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2024 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)
*/
//# sourceMappingURL=chunk-ZJG2XKVN.js.map
